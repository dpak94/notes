[{"id":0,"href":"/notes/posts/sample-post/","title":"Sample Post","section":"Posts","content":"My First Post on Book Theme Hugo\n"},{"id":1,"href":"/notes/docs/web-dev/clean-code/","title":"Clean Code for JS","section":"Docs","content":"\rClean Code Norms For JavaScript\r#\r// Example A : Bad Code const x = function (z) { const w = \u0026#34;Hello\u0026#34;; return w + z; }; // Example B : Good Code const generateUserGreeting = function (name) { const greeting = \u0026#34;Hello\u0026#34;; return greeting + name; }; Of the above two examples, code B is:\nEasy to read. Assigns names to functions and variables that convey their task/nature instead of single letters, resultin in less confusion. Assigned names follow camelCase naming convention. Naming Functions and Variables\r#\r1. A good name is descriptive\r#\rVariables should always begin with a noun or an adjective (that is, a noun phrase) and functions with a verb. The only exception would be constants, which must be declared with all caps.\nlet getName = \u0026#34;Alex\u0026#34;; // Bad variable name üëéüèΩüëéüèΩüëéüèΩ let userName = \u0026#34;Alex\u0026#34;; // Good variable name üëçüëçüëç const MILLISECONDS_PER_HOUR = 60 * 60 * 1000; 2. Use consistent vocabulary\r#\rDo not use threee different verbs for the same kind of task when assigning names to variables.\nIn the below bad example, 3 different verbs (get, fetch \u0026amp; retrieve) are used\nlet sumArray; üëç let array1; üëé // Good function getPlayerScore(); function getPlayerName(); function getPlayerTag(); // Bad function getUserScore(); function fetchPlayerName(); function retrievePlayerOneTag(); 3. Use searchable and easily understandable names\r#\rInstead of\nsetTimeout(stopTimer, 3600000); implement\nconst MILLISECONDS_PER_HOUR = 60 * 60 * 1000; // 3,600,000; setTimeout(stopTimer, MILLISECONDS_PER_HOUR); Other rules for clean code\r#\rDon\u0026rsquo;t comment where you\u0026rsquo;re supposed to use Git. Don\u0026rsquo;t comment how, comment why. The viewer reads the code to find how. Semicolons are optional, JS Compiler takes care of it by adding semicoloms automatically. When employing a formula in a function, it would be a good idea to put a brief comment explaining the formula. Use correct indentation. Avoid abusive comments. Avoid extremely large function. Break them into smaller ones. Treat changes with caution. Avoid indiscriminate mixing of coding languages Summarize the imported files, packages etc. More Info\r#\rAirBnB Style Guide for JavaScript Styling Beautiful JavaScript: Easily Create Chainable (Cascading) Methods for Expressiveness "},{"id":2,"href":"/notes/docs/general/conda/","title":"Conda","section":"Docs","content":"\rConda\r#\rAction Command list all environments and locations conda env list update all packages in environment conda update --all --name ENVNAME install packages in environment conda install --name ENVNAME PKG1 PKG2 remove package from environment conda uninstall PKGNAME --name ENVNAME reactivate base environment (recommended for end of session) conda activate base Environment Management\nAction Command list packages + source channels conda list -n ENVNAME --show-channel-urls uninstall package from specific channel conda remove -n ENVNAME -c CHANNELNAME PKGNAME create environment with Python version conda create -n ENVNAME python=3.10 clone environment conda create --clone ENVNAME -n NEWENV list revisions made to environment conda list -n ENVNAME --revisions restore environment to a revision conda install -n ENVNAME --revision NUMBER delete environment by name conda remove -n ENVNAME --all Exporting Environments\nAction Command cross-platform compatible conda env export --from-history\u0026gt;ENV.yml platform + package specific conda env export ENVNAME\u0026gt;ENV.yml platform + package + channel specific conda list --explicit\u0026gt;ENV.txt Importing Environments\nAction Command Import from a .yml file conda env create -n ENVNAME --file ENV.yml Import from a .txt file conda create -n ENVNAME --file ENV.txt Additional Commands\nAction Command get help for any command conda COMMAND --help get info for any package conda search PKGNAME --info run commands w/o user prompt eg, installing multiple packages conda COMMAND ARG --yes \u0026lt;/br\u0026gt; conda install PKG1 PKG2 --yes remove all unused files conda clean --all examine conda configuration conda config --show "},{"id":3,"href":"/notes/docs/web-dev/css/","title":"CSS","section":"Docs","content":"\rCSS Notes\r#\rInteractive CSS CC |\nMDN Docs \u0026amp; Misc\r#\rCSS | DevDocs.io |\nBuilding Block | Backgrounds and borders | Lists | Links | Images, media, forms | Web Fonts |\nLayout - Flexbox, Grids, Floats, Multi-Column Layout, Positioning, Responsive Design |\nFlexBox Resources: Interactive Flexbox | CSS Tricks\u0026rsquo; Flexbox Layout |\nBasic Syntax\r#\rSelectors\r#\rSelectors simply refer to the HTML elements to which CSS rules apply - they are what is actually being selected for each rule.\nUniversal Selector will select elements of any type, hence the name \u0026ldquo;universal\u0026rdquo;, and the syntax for it is a simple asterisk *. In the below example, every element would have the color : purple style applied to it.\nType Selector will select all elements of the given element type, and the syntax is just the name of the element.\nClass Selectors will select all elements with the given class, which is just an attribute youplace on an HTML Element. Here\u0026rsquo;s how you add a class to an HTML tag and select it in CSS.\n\u0026lt;div class=\u0026#34;alert-text\u0026#34;\u0026gt;Please agree to our terms of service.\u0026lt;/div\u0026gt; .alert-text { color: red; } ID Selectors are similar to class selectors. They select an element with the given ID, which is another attribute you place on an HTML Element. The major difference between classes and IDs is that an element can only have one ID.\n\u0026lt;div id=\u0026#34;title\u0026#34;\u0026gt;My Awesome 90\u0026#39;s Page\u0026lt;/div\u0026gt; #title { background-color: red; /* Hash instead of period */ } Grouping Selector If we have two groups of elements that share some of their style declarations :\n.read, .unread { color: white; background-color: black; } .read { /* several unique declarations */ } .unread { /* several unique declarations */ } Chaining Selectors Another way to use selectors is to chain thema as a list without any separation.\n\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;subsection header\u0026#34;\u0026gt;Latest Posts\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;subsection preview\u0026#34;\u0026gt;This is where a preview for a post might go.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; .subsection.header { color: red; } .subsection#preview { color: blue; } In general, you can‚Äôt chain more than one type selector since an element can‚Äôt be two different types at once.\nCombinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors.\nA Descendant Combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc.) that matches the previous selector.\n\u0026lt;!-- index.html --\u0026gt; \u0026lt;div class=\u0026#34;ancestor\u0026#34;\u0026gt; \u0026lt;!-- A --\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt; \u0026lt;!-- B --\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt;\u0026lt;!-- C --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- D --\u0026gt; /* styles.css */ .ancestor .contents { /* some declarations */ } This code affects only B and C but not D becasue it does not share the ancestor class \u0026ldquo;ancestor\u0026rdquo; with B and C.\nThere is no limit on how many combinators you can add to a rule, but too many combinators may result in confusion. Tread carefully.\nImage Height and Width If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of ‚Äúauto‚Äù for the¬†height¬†property and adjust the¬†width¬†value\nimg { height: auto; width: 500px; } It‚Äôs best to include both of these properties for¬†\u0026lt;img\u0026gt;¬†elements, even if you don‚Äôt plan on adjusting the values from the image file‚Äôs original ones. When these values aren‚Äôt included, if an image takes longer to load than the rest of the page contents, the image won‚Äôt take up any space on the page at first, but will suddenly cause a drastic shift of the other page contents once it does load in.\nExplicitly stating a¬†height¬†and¬†width¬†prevents this from happening, as space will be ‚Äúreserved‚Äù on the page and will just appear as a blank space until the image loads.\nInline CSS will override the other two methods, which can cause unexpected results.\nBox Model\r#\rPositioning \u0026amp; Layout are the most important skills to be mastered.\nThe Box Model\nEvery single thing on a webpage is a rectangular box.\nThese boxes can have other boxes in them and can sit alongside one another.\npadding - increases the space between the border of a box and the content of the box.\nmargin - increases the space between the borders of a box and the borders of adjacent boxes\nborder - adds space (even if it\u0026rsquo;s only a pixel or two) between the margin and the padding\nDisplay Types\r#\rInline, Block \u0026amp; Flex Using the display property, you can set various values for the display type.\nDisplay : block\r#\rIf display: block, then the box will break onto a new line. The width and height props are respected.\npadding, margin \u0026amp; border props willcause other elements to be pushed away from the box.\nIf width is not specified, the box will extend in the inline directioon to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.\nEg : Some HTML elements like h1 and p, use block as their outer display type by default.\nDisplay : inline\r#\rIf a box has an outer display type of¬†inline, then the box will not break onto a new line.\nThe¬†width¬†and¬†height¬†properties will not apply.\nTop and bottom padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.\nLeft and right padding, margins, and borders will apply and will cause other inline boxes to move away from the box.\nEg : Some HTML elements, such as \u0026lt;a\u0026gt;, \u0026lt;span\u0026gt;, \u0026lt;em\u0026gt; and \u0026lt;strong\u0026gt; use inline as their outer display type by default.\nDisplay : inner display\r#\rBoxes also have an¬†inner¬†display type, which dictates how elements inside that box are laid out.\nBlock and inline layout is the default way things behave on the web. By default and without any other instruction, the elements inside a box are also laid out in¬†normal flow¬†and behave as block or inline boxes.\nYou can change the inner display type for example by setting¬†display: flex;. The element will still use the outer display type¬†block¬†but this changes the inner display type to¬†flex. Any direct children of this box will become flex items and behave according to the¬†Flexbox¬†specification.\nMore info @ Mozilla Docs\nTips\r#\rAlways use box-sizing: border-box; property in the Universal Selector so that the height and width properties applied to descending elements remain what they they are. An inline element cannot contain a block-level element! Resources\nScrim Interactive on inline and block Flex Box\r#\rFlexbox is a way to arrange items into rows or columns. These items will flex (i.e. grow or shrink) based on some simple rules that you can define.\nA flex container is any element that has display: flex on it. A flex item is any element that lives directly inside of a flex container. Any element can be both a flex container and a flex item. Said another way, you can also put display: flex on a flex item and then use flexbox to arrange its children. Flex Order Flexible Items Use display: flex; to create a flex container. Use justify-content to define the horizontal alignment of items. Use align-items to define the vertical alignment of items. Use flex-direction if you need columns instead of rows. Use the row-reverse orcolumn-reverse values to flip item order. Use order to customize the order of individual elements. Use align-self to vertically align individual items. Use flex to create flexible boxes that can stretch and shrink. Flex Shorthand\nThe flex declaration is actually a shorthand for 3 properties that you can set on a flex item.\nEg : flex is actually shorthand for flex-grow, flex-shrink and flex-basis.\ndiv { flex: 1; } In the above screenshot, flex:1 equates to flex-grow: 1, flex-shrink: 1 and flex-basis: 0\nGrowing \u0026amp; Shrinking\r#\rFlex-Grow\r#\rflex-grow expects a single number as its value, and that number is used as the flex-item‚Äôs ‚Äúgrowth factor‚Äù. When we applied flex: 1 to every div inside our container, we were telling every div to grow the same amount.\nFlex-Shrink\r#\rflex-shrink is similar to flex-grow, but sets the ‚Äúshrink factor‚Äù of a flex item. flex-shrink only ends up being applied if the size of all flex items is larger than their parent container. For example, if our 3 divs from above had a width declaration like: width: 100px, and .flex-container was smaller than 300px, our divs would have to shrink to fit.\nFlex-Basis\r#\rflex-basis sets the initial size of a flex item, so any sort of flex-growing or flex-shrinking starts from that baseline size. The shorthand value defaults to flex-basis: 0%\nAuthors are encouraged to control flexibility using the flex shorthand rather than with its longhand properties directly, as the shorthand correctly resets any unspecified components to accommodate common uses.\nMore on flex here\n"},{"id":4,"href":"/notes/docs/git/","title":"Git","section":"Docs","content":"\rGit\r#\rGit is the free and open source distributed version control system that\u0026rsquo;s responsible for everything GitHub related that happens locally on your computer.\nInstallation\r#\rWindows Mac All Platforms Configuring User Information\r#\rConfiguring User Information to be used across all repositories\nCommand Function git config --global user.name ‚Äú[firstname lastname]‚Äù Set a name that is identifiable for credit when review version history git config --global user.email ‚Äú[valid-email]‚Äù Set an email address that will be associated with each history marker git config --global color.ui auto Set automatic command line coloring for Git for easy reviewing Setup \u0026amp; Initializing\r#\rCommand Function git init Initialize an existing directory as a Git repository git clone [url] Retrieve an entire repository from a hosted location via URL Stage \u0026amp; Snapshot\r#\rWorking with snapshots and the Git staging area\nCommand Function git status Show modified files in working directory, staged for your next commit git add fileName Add a file as it looks now to your next commit (stage) git reset fileName Unstage a file while retaining the changes in working directory git diff Difference of what is changed but not staged git diff --staged Difference of what is staged but not yet commited git commit -m ‚Äú[descriptive message]‚Äù Commit your staged content as a new commit snapshot git commit -a -m ‚Äú[descriptive message]‚Äù Commit your content without staging Branch \u0026amp; Merge\r#\rIsolating work in branches, changing context, and integrating changes\nCommand Function git branch List your branches. a * will appear next to the currently active branch git branch branchName Create a new branch at the current commit git checkout Switch to another branch and check it out into your working directory git merge branchName Merge the specified branch‚Äôs history into the current one git log Show all commits in the current branch‚Äôs history git log --online Show all commits with only commit messages git log -p Show all commits along with changes Inspect \u0026amp; Compare\r#\rExamining logs, diffs and object information\nCommand Function git log Show the commit history for the currently active branch git log branchB..branchA Show the commits on branchA that are not on branchB git log --follow [file] Show the commits that changed file, even across renames git diff branchB...branchA Show the diff of what is in branchA that is not in branchB git show [SHA] Show any object in Git in human-readable format Share \u0026amp; Update\r#\rRetrieving updates from another repository and updating local repos\nCommand Function git remote add [alias] [url] Add a git URL as an alias git fetch [alias] Fetch down all the branches from that Git remote git merge [alias]/[branch] Merge a remote branch into your current branch to bring it up to date git push [alias] [branch] Transmit local branch commits to the remote repository branch git pull Fetch and merge any commits from the tracking remote branch Tracking Path Changes\r#\rVersioning file removes and path changes\nCommand Function git rm [file] Delete the file from project and stage the removal for commit git mv [existing-path] [new-path] Change an existing file path and stage the move git log --stat -M Show all commit logs with indication of any paths that moved Rewrite History\r#\rRewriting branches, updating commits and clearing history\nCommand Function git rebase [branch] Apply any commits of current branch ahead of specified one git reset --hard [commit] Clear staging area, rewrite working tree from specified commit Temporary Commits\r#\rTemporarily store modified, tracked files in order to change branches\nCommand Function git stash Save modified and staged changes git stash list List stack-order of stashed file changes git stash pop Write working from top of stash stack git stash drop Discard the changes from top of stash stack Ignoring Patterns\r#\rPreventing unintentional staging or commiting of files\nlogs/ *.notes pattern*/ Save a file with desired paterns as .gitignore with either direct string matches or wildcard globs\ngit config --global core.excludesfile [file] System wide ignore patern for all local repositories\nSSH Key Generation\r#\rGenerating SSH Key for local Git Bash to pull remote repos and adding the generated key to the remote repo account.\nOpen Git Bash\nPaste the text below :\nssh-keygen -t rsa -b 4096 -C \u0026quot;dpak@tuta.io\u0026quot;\nThis creates a new SSH key, using the provided email as a label\nGenerating public/private rsa key pair.\nWhen you get the below prompt :\nEnter a file in which to save the key (/c/Users/ranger/.ssh/id_rsa): [Press Enter]\nThe public key will be stored in C:\\Users\\ranger\\.ssh as id_rsa.pub file. Opening this file with notepad or VSCode gives the SSH key. This key can be added to GitHub or GitBucket on their website.\n7 Golden Rules for Git Commit\r#\rSeparate the subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters Use the body to explain what and why vs how "},{"id":5,"href":"/notes/docs/web-dev/html/","title":"HTML","section":"Docs","content":"\rHTML\r#\rHTML - Hyper Text Markup Language\nInteractive HTML CC | DevDocs Browser Default Styles |\nMDN Docs Quick Links \u0026amp; Misc\r#\rDebugging | Advanced Text Formatting |\nMultimedia | Images | Video \u0026amp; Audio | Vector Graphics | Embedding |\nTables | Elements | HTML References |\nForms | Symbols | Layout | Named Characters |\nReserved Characters, Quotes \u0026amp; Other Escape Characters\nCharacter Escape Syntax Character Escape Syntax \u0026lt; \u0026amp;lt \u0026quot; \u0026amp;rdquo; \u0026gt; \u0026amp;gt \u0026quot; \u0026amp;ldquo; \u0026amp; \u0026amp;amp ‚Äò \u0026amp;lsquo; ' \u0026amp;rsquo; More characters here\nVoid Elements - Some elements do not have a closing tag. These elements have only opening tag.Eg : \u0026lt;br\u0026gt;, \u0026lt;img\u0026gt; etc. Some elements just have a forward slash at the end like : \u0026lt;br /\u0026gt; or \u0026lt;img /\u0026gt;. The latest version of HTML specification specifically discourages their use and considers them invalid.\nDOCTYPE - Every HTML page starts with a doc type declaration. DOCTYPE\u0026rsquo;s purpose is to tell the browser what version of HTML it should use to render the document. The latest version is HTML5, and the doctype for that version is simply \u0026lt;!DOCTYPE html\u0026gt;\nThe doctypes for older versions of HTML were a bit more complicated. For example, this is the doctype declaration for HTML4: \u0026lt;!DOCTYPE HTML PUBLIC \u0026quot;-//W3C//DTD HTML 4.01 Transitional//EN\u0026quot; \u0026quot;http://www.w3.org/TR/html4/loose.dtd\u0026quot;\u0026gt;\nHTML Element - We need to provide an \u0026lt;html\u0026gt; element. This is the root of the document, meaning every other document descends from it.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;/html\u0026gt; Head Element - The \u0026lt;head\u0026gt; element is where we put important meta-info about our webpages, and stuff required for our webpages to render correctly in the browser. Inside the \u0026lt;head\u0026gt;, we should not use any element that displays content on the webpage.\nMeta Element - We should have the \u0026lt;meta\u0026gt; tag with the charset encoding of the webpage in the \u0026lt;head\u0026gt; element : \u0026lt;meta charset='utf-8\nTitle - The \u0026lt;title\u0026gt; element is used to give webpages a human-readable title which is displayed in our webpage\u0026rsquo;s browser tab.\nBody Element - The final element to complete the HTML boilerplate is the \u0026lt;body\u0026gt; element.This is where all the content that will be displayed to users will go - the text, images, lists, links and so on.\nViewing the HTML files in the browser - New Way\nUbuntu - Open terminal in the html file location, type google-chrome index.html MacOS - In the directory, type open./index.html Lists\r#\r\u0026lt;start\u0026gt; Attribute\r#\rThe \u0026lt;start\u0026gt; attribute defines the number from which an ordered list should start. By default, ordered lists start at 1.\n\u0026lt;ol start=\u0026#34;30\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Head north on N Halsted St\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn right on W Diversey Pkwy\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn left on N Orchard St\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;reversed\u0026gt; Attribute\r#\rThe \u0026lt;reversed\u0026gt; attribute is a Boolean attribute when used on the element, allows a list to appear in reverse order. An ordered list of five items numbered 1 to 5 may be reversed and ordered from 5 to 1.\n\u0026lt;ol reversed\u0026gt; \u0026lt;li\u0026gt;Head north on N Halsted St\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn right on W Diversey Pkwy\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn left on N Orchard St\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;value\u0026gt; Attribute\r#\rUsed on an individual \u0026lt;li\u0026gt; list element within an ordered list to change its value eithin the list. The number of any list item appearing below a list item with a \u0026lt;value\u0026gt; attribute will be recalculated accordingly.\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Head north on N Halsted St\u0026lt;/li\u0026gt; \u0026lt;li value=\u0026#34;9\u0026#34;\u0026gt;Turn right on W Diversey Pkwy\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn left on N Orchard St\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;!-- The list number changes to 9 and starts incrementing from there --\u0026gt; \u0026gt; More kinds of lists and list attributes can be found @ Shay Howe\u0026rsquo;s Blog Links and Images\r#\rOpening Links in a New Tab\r#\r\u0026lt;a href=\u0026#34;https://www.theodinproject.com/about\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; \u0026gt;click me\u0026lt;/a \u0026gt; target attribute specifies where the link source will be opened. By default it will take on the _self value which opens the link in the current tab. To open the link in a new tab or window set it to _blank rel attribute is used to describe the relation between the current page and the linked document. noopener value prevents the opened link from gaining access to the webpage from which it was opened. noreferrer value prevents the opened link from knowing which webpage or resource has a link to it. It also includes the noopener behaviour and thus can be used by itself as well. The prevention of access that is caused by noopener prevents phishing attacks where the opened link may change the original webpage to a different one to trick users. This is referred to as tabnabbing. Adding the noreferrer value can be done if you wish to not let the opened link know that your webpage links to it.\nImages\r#\rImage width and height can be adjusted within the img tag itself. Accepted formats: JPG, GIF, PNG \u0026amp; SVG "},{"id":6,"href":"/notes/docs/web-dev/js/","title":"JavaScript","section":"Docs","content":"\rJavaScript\r#\rInteractive JS CC\nQuick Links\r#\rCodePen.io for trying out new HTML, CSS \u0026amp; JS stuff. DevDocs MDN JS | Arrays | Strings | String Methods | Math \u0026amp; Operators | Operator Precedence | Functions | Objects | RegExp | RegExp CheatSheet | Chrome Dev Tools | Asynchronous JS | Events | Web Forms | Client-side Web APIs\nW3 School Quick Links\r#\rDOM Reference | DOM Document | Arrays | Operators | Strings | Math | Date | Number | Global | Can I Use?\nJavaScript is a language used along with HTML and CSS to communicate with the user.\nconsole.log(\u0026quot;text\u0026quot;) is used to print something to the developer console in the browser Link a JS script file to the html file by using command \u0026lt;script src=\u0026quot;javascript.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Variables \u0026amp; Constants in JS\r#\rIn older scripts, var is used inplace of let\nEg: var message = 'Ciao';\nThe name must only contain letters, digits or symbols $ and _. The first character must not be digit. Case matters. apple and APPLE are differnet variables. Do not draw variables from reserved words When the name contains multiple words, camelCase is commonly used. That is: words go one after another, each word except first starting with a capital letter: myVeryLongName Declaring constants in JavaScript\r#\rconst myBirthday = '18.04.1982;\nAny attempt to reassign value would result in error.\nWe generally use upper case for constants that we \u0026ldquo;hard-coded\u0026rdquo; i.e., when the value is known prior to execution and directly written into the code. Eg : birthday, planet count etc. Multi-line Strings\nStarting from 2015, thanks to ES6, multi-line strings can be written like below :\nconsole.log(` I\u0026#39;m a party worker from Sevastopol. I came here yesterday.`); Note : Don\u0026rsquo;t forget to use backticks (`) instead of \u0026rsquo; or \u0026quot; for the string.\nType Conversion and Coercion\r#\rconst inputYear = \u0026#34;1991\u0026#34;; console.log(typeof inputYear); // 1991 console.log(Number(inputYear) + 18); // 2009 console.log(Number(\u0026#34;Jonas\u0026#34;)); //NaN console.log(typeof NaN); // number // Type Coercion console.log(\u0026#34;24\u0026#34; + 2); // 242 console.log(\u0026#34;12\u0026#34; * \u0026#34;12\u0026#34;); // 144 Truthy \u0026amp; Falsy Values\r#\r// Truthy and Falsy Values console.log(Boolean(0)); // false console.log(Boolean(undefined)); // false console.log(Boolean({})); //true console.log(Boolean(\u0026#34;\u0026#34;)); // false const money = 0; if (money) { console.log(\u0026#34;Don\u0026#39;t spend it all!\u0026#34;); } else { console.log(\u0026#34;Earn money First!\u0026#34;); } // Earn money First !!! let height; if (height) { console.log(\u0026#34;Good! Height is defined!\u0026#34;); } else { console.log(\u0026#34;Please define height!!!\u0026#34;); } // Please define Height!!! Operators\r#\rEquality Operators\r#\r=== and == are equality operators.\n// Equality Operators const age = 18; if (age === 18) console.log(\u0026#34;You are an adult!!!! (strict)\u0026#34;); // You are an adult !!!! (strict) === \u0026gt; Comparison Operator if (age == 18) console.log(\u0026#34;You are an adult!!!! (strict)\u0026#34;); // You are an adult !!!! (loose) == \u0026gt; Comparison Operator // Always use strict equality operator (===) over loose equality operator (==) const favNum = Number(prompt(\u0026#34;What\u0026#39;s your favorite Number ?\u0026#34;)); console.log(`Your favorite number is ${favNum}`); if (favNum === 23) { console.log(`23 is a favorite number`); } // === strictly treats the variable as a string. // Thus the if condition is not true else if (favNum === 16) { console.log(`16 is the second fav number`); } else if (favNum !== 16) { console.log(`16 is not the second fav number`); } else { console.log(`Not a favorite number`); } // Boolean Logic Basics let isIsland = false; let isPeninsula = true; console.log(`AND result for the statements : ${isIsland \u0026amp;\u0026amp; isPeninsula}`); // false console.log(`OR result for the statements : ${isIsland || isPeninsula}`); // true console.log(`NOT result for the statements : ${!isIsland || !isPeninsula}`); //true Ternary (Conditional) Operator\r#\r// Conditional Operator const age = 25; age \u0026gt;= 18 ? console.log(`I like to drink wine üç∑ (‚ùÅ¬¥‚ó°\\`‚ùÅ)`) : console.log(`I had to drink water üíß üòí`); // `I had to drink water üíß üòí` // Conditional Operator let age = 15; const drink = age \u0026gt;= 18 ? \u0026#34;wine üç∑\u0026#34; : \u0026#34;water üíß\u0026#34;; console.log(drink); // water üíß let drink2; if (age \u0026gt;= 18) { drink2 = \u0026#34;wine üç∑\u0026#34;; } else { drink2 = \u0026#34;water üíß\u0026#34;; } console.log(drink2); // water üíß console.log(`I like to drink ${age \u0026gt;= 18 ? \u0026#34;wine üç∑\u0026#34; : \u0026#34;water üíß\u0026#34;}`); // water üíß Switch Statements\r#\r// Switch Statements const day = \u0026#34;thursday\u0026#34;; switch (day) { case \u0026#34;monday\u0026#34;: console.log(\u0026#34;Plan my course\u0026#34;); console.log(\u0026#34;Go to coding meetup\u0026#34;); break; case \u0026#34;tuesday\u0026#34;: console.log(\u0026#34;Prepare course material\u0026#34;); console.log(\u0026#34;Sheen the roof\u0026#34;); break; case \u0026#34;wednesday\u0026#34;: console.log(\u0026#34;Record Vids\u0026#34;); break; case \u0026#34;thursday\u0026#34;: console.log(\u0026#34;Upload the vids\u0026#34;); break; default: console.log(\u0026#34;Not a valid day.\u0026#34;); } JavaScript Releases\r#\rBrief History of JS:\nBrendan Eich creates the first version of JavaScript in 10 days. Initially called Mocha EcmaScript 1 released in 1997 ES5 released in 2015 with lots of great new features. ES6 brought biggest updates to the language. *ECMAScript * changes to yearly releases. Modern JavaScript Engine is backwards compatible. Strict Mode\r#\r\u0026#34;use strict\u0026#34;; // Activates strict mode for the entire script file Avoids accidental bugs and errors in the code. Prefer to turn on Strict Mode while coding. Functions #\r// Functions function logger() { // Function Definition console.log(\u0026#34;My Name is John\u0026#34;); } logger(); // Function Calling/ invoking / running function fruitProcessor(apples, oranges) { console.log(apples, oranges); const juice = `Juice with ${apples} apples and ${oranges} oranges.`; return juice; } const appleJuice = fruitProcessor(5, 6); console.log(appleJuice); // My Name is John // 5 6 // Juice with 5 appleas and 6 oranges Function Declaration and Expression\n// JavaScript Function Declaration function calcAge(birthYear) { return 2024 - birthYear; } const age = calcAge(1994); // Function Expression const calcAge2 = function (birthYear) { return 2024 - birthYear; }; const age2 = calcAge2(1997); console.log(age, age2); // 30 27 Arrow Function\n// Arrow Function // Like Lambda Function in Python. Easy to write a function const yearsUntilRetirement = (birthYear, firstName) =\u0026gt; { const age = 2024 - birthYear; const retirement = 65 - age; // return retirement; return `Hello ${firstName}, you will retire in ${retirement} years.`; }; console.log(yearsUntilRetirement(1994, \u0026#34;Jackson\u0026#34;)); // Hello Jackson, you will retire in 35 years. Functions Calling Other Functions\n// Function(s) calling other function(s) function cutFruitPieces(fruit) { return fruit * 4; } function FruitProcessor(apples, oranges) { applePieces = cutFruitPieces(apples); orangePieces = cutFruitPieces(oranges); const juice = `Juice made with ${applePieces} pieces from ${oranges} oranges \u0026amp; ${orangePieces} pieces from ${apples} apples`; return juice; } console.log(FruitProcessor(3, 3)); // Juice made with 12 pieces from 3 oranges \u0026amp; 12 pieces from 3 apples Arrays\r#\rArray MDN Docs Reference Declared using const keyword. Once declared, the array cannot be reassigned. Arrays declared with var can be initialized at any time. cars = [\u0026#34;Saab\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; var cars; An array declared with const has Block Scope const cars = [\u0026#34;Saab\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // Here cars[0] is \u0026#34;Saab\u0026#34; { const cars = [\u0026#34;Toyota\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // Here cars[0] is \u0026#34;Toyota\u0026#34; } // Here cars[0] is \u0026#34;Saab\u0026#34; // Array Declaration const friends = [\u0026#34;Mike\u0026#34;, \u0026#34;Ike\u0026#34;, \u0026#34;Jake\u0026#34;, \u0026#34;Pike\u0026#34;, \u0026#34;Kyle\u0026#34;]; console.log(friends[1]); // Ike const years = new Array(1991, 1992, 1993, 1997); //Access elements in array. Index starts from 0 (like Python) console.log(years[2]); // 1993 console.log(friends[friends.length - 1]); // Access last element via length console.log(friends.reverse()[0]); // The array is reversed and the last element becomes first element and is accessed. // Replacing an element in array friends[2] = \u0026#34;Jim\u0026#34;; console.log(friends[2]); // Jim // Adding a variable as an array member const nome = \u0026#34;Tyler\u0026#34;; friends[5] = nome; // Finding the length of the array console.log(friends); // (6) [\u0026#39;Mike\u0026#39;, \u0026#39;Ike\u0026#39;, \u0026#39;Jim\u0026#39;, \u0026#39;Pike\u0026#39;, \u0026#39;Kyle\u0026#39;, \u0026#39;Tyler\u0026#39;] console.log(friends.length); // Length of the array - 6 Array Methods\n// Array Methods const friends = [\u0026#34;Michael\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;Charles\u0026#34;, \u0026#34;William\u0026#34;, \u0026#34;George\u0026#34;]; // Adds element to the end of the array friends.push(\u0026#34;Jake\u0026#34;); console.log(friends); // (6) [\u0026#39;Michael\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;, \u0026#39;Jake\u0026#39;] // Adds elements at the beginning of the array friends.unshift(\u0026#34;Richard\u0026#34;); console.log(friends); // (7) [\u0026#39;Richard\u0026#39;, \u0026#39;Michael\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;, \u0026#39;Jake\u0026#39;]; // Removes the last element friends.pop(); console.log(friends); // [\u0026#39;Richard\u0026#39;, \u0026#39;Michael\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;] // Removes the first element friends.shift(); console.log(friends); //(5) [\u0026#39;Michael\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;] // Gives the index of element =\u0026gt; 2 console.log(friends.indexOf(\u0026#34;Charles\u0026#34;)); // Gives the index of element =\u0026gt; 3 console.log(friends.indexOf(\u0026#34;William\u0026#34;)); // ES6 Method to confirm the existence of element console.log(friends.includes(\u0026#34;William\u0026#34;)); // Modern method // Convert array elements into comma separated string array valuse console.log(friends.toString()); // =\u0026gt; Michael,John,Charles,William,George // Using at(), access the elements in an array. Supported since March 2022 console.log(friends.at(2)); // =\u0026gt; \u0026#39;Charles\u0026#39; // Join all array elements into a string using join() method console.log(friends.join(\u0026#34; - \u0026#34;)); // =\u0026gt; Michael - John - Charles - William - George // Concatenate arrays. Can also concatenate a string to an array. const twoArray = friends.concat(fruits); console.log(twoArray); // =\u0026gt; [\u0026#39;Michael\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Orange\u0026#39;, \u0026#39;Apple\u0026#39;, \u0026#39;Mango\u0026#39;] // Copy an element to another index in the array using copyWithin() const friends = [\u0026#34;Michael\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;Charles\u0026#34;, \u0026#34;William\u0026#34;, \u0026#34;George\u0026#34;]; console.log(friends.copyWithin(0, -1)); // Copy to index 0, the leemnt at index -1 // =\u0026gt; [\u0026#39;George\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Charles\u0026#39;, \u0026#39;William\u0026#39;, \u0026#39;George\u0026#39;] /* flat() - flattens the array by creating a new array with sub-array elements to a specified depth */ const myArray = [ [1, 2], [3, 4], [5, 6], [7, 8], ]; const newArray = myArray.flat(); console.log(newArray); // =\u0026gt; [1, 2, 3, 4, 5, 6] // splice() - add new items to an array const fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.splice(2, 0, \u0026#34;Lemon\u0026#34;, \u0026#34;Kiwi\u0026#34;); // 2- new place where element is to be added, // 0 - how many elements to be removed, // \u0026#34;Lemon\u0026#34;, \u0026#34;Kiwi\u0026#34; - new elements to be added console.log(fruits); // =\u0026gt; [\u0026#39;Banana\u0026#39;, \u0026#39;Orange\u0026#39;, \u0026#39;Lemon\u0026#39;, \u0026#39;Kiwi\u0026#39;, \u0026#39;Apple\u0026#39;, \u0026#39;Mango\u0026#39;] /* toSpliced() - ES2023 Addition as a safe way to splice an array without altering the original array. This method creates a new array that is spliced while keeping the original unchanged.*/ const months = [\u0026#34;Jan\u0026#34;, \u0026#34;Feb\u0026#34;, \u0026#34;Mar\u0026#34;, \u0026#34;Apr\u0026#34;]; const spliced = months.toSpliced(0, 1); // =\u0026gt; [\u0026#39;Feb\u0026#39;, \u0026#39;Mar\u0026#39;, \u0026#39;Apr\u0026#39;] // slice() - slice out a part of an array into a new array const fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; const citrus = fruits.slice(1); // Slicing from index 1. // slice takes two args : start point and end point. If end point not given, rest of the array is sliced out. console.log(citrus); // =\u0026gt; [\u0026#39;Orange\u0026#39;, \u0026#39;Lemon\u0026#39;, \u0026#39;Apple\u0026#39;, \u0026#39;Mango\u0026#39;] Objects\r#\rSimilar to dictionaries in Python // Objects (Dictionaries) const myBio = { firstName: \u0026#34;Dpak\u0026#34;, lastName: \u0026#34;94\u0026#34;, age: 29, job: \u0026#34;Engineer\u0026#34;, hobbies: [\u0026#34;gaming\u0026#34;, \u0026#34;movies\u0026#34;, \u0026#34;book reading\u0026#34;], }; // Accessing the contents of the objects console.log(myBio[\u0026#34;firstName\u0026#34;]); // Dpak console.log(myBio.age); //29 myBio.city = \u0026#34;Hyderabad\u0026#34;; console.log(myBio[\u0026#34;city\u0026#34;]); const query = prompt(\u0026#34;What do you want to know about the user?\u0026#34;); console.log(myBio[query]); if (myBio[query]) { console.log(myBio[query]); } else { console.log(\u0026#34;Please enter valid data query\u0026#34;); } // Best Friend Challenge. Print the No. of Jonas\u0026#39;s friends and his best friend. bioData = { name: \u0026#34;Jonas\u0026#34;, friends: [\u0026#34;Mike\u0026#34;, \u0026#34;Pike\u0026#34;, \u0026#34;Richard\u0026#34;, \u0026#34;Wilhelm\u0026#34;], age: 24, location: \u0026#34;Deutschland\u0026#34;, }; console.log( `${bioData.name} has ${bioData[\u0026#34;friends\u0026#34;].length} friends. His best friend is ${bioData.friends[0]}.` ); // Jonas has 4 friends. His best friend is Mike. Object Methods\r#\r// this keyword - used to indicate the curent object const jonas = { firstName: \u0026#34;Jonas\u0026#34;, lastName: \u0026#34;Schmedtmann\u0026#34;, job: \u0026#34;Engineer\u0026#34;, friends: [\u0026#34;Rob\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;Dan\u0026#34;, \u0026#34;Ulrich\u0026#34;], hasDriversLicense: false, birthYear: 1991, ageCalc: function () { this.age = 2024 - this.birthYear; return this.age; // \u0026#34;this\u0026#34; replacing the current object the element is a member of. }, }; console.log(jonas.ageCalc()); // 33 Use dot notation to access the function output i.e age console.log(jonas.age); // 33 The age variable in the ageCalc function // Challenge // Jonas is a 46 year old teacher..... getSumm = function () { return `${jonas.firstName} is a ${jonas.ageCalc()} years old programmer. He ${ this.hasDriversLicense ? `has` : `does not have` } a Driver\u0026#39;s License.`; }; console.log(getSumm()); // Jonas is a 33 years old programmer. He does not have a Driver\u0026#39;s License. Loops\r#\rfor loop\r#\rconst jonas = [ \u0026#34;Jonas\u0026#34;, \u0026#34;Schmedtmann\u0026#34;, \u0026#34;Engineer\u0026#34;, 420, [\u0026#34;Rob\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;Dan\u0026#34;, \u0026#34;Ulrich\u0026#34;], ]; const types = []; for (let i = 0; i \u0026lt; jonas.length; i++) { console.log(jonas[i], typeof jonas[i]); types.push(typeof jonas[i]); } console.log(`New types array : ${types}`); //Outputs the new array. // Nested Loops const players = [\u0026#34;Mark\u0026#34;, \u0026#34;Peter\u0026#34;, \u0026#34;Thomas\u0026#34;]; const sports = [\u0026#34;Cricket\u0026#34;, \u0026#34;Wrestling\u0026#34;, \u0026#34;Soccer\u0026#34;]; for (let player = 0; player \u0026lt; players.length; player++) { for (let sport = 0; sport \u0026lt; sports.length; sport++) { console.log(`${players[player]} plays ${sports[sport]}. `); } } // While Loop let rep = 1; while (rep \u0026lt;= 10) { console.log(`While : Running instance ${rep}`); rep++; } Object Oriented Programming\r#\rFeatures of OOP:\nEncapsulation Abstraction Inheritance Polymorphism OOP in JS uses Prototypal Inheritance 3 ways of Implementing Prototypal Inheritance in JS\r#\rConstructor Functions Technique to create objects from a function Examples - Arrays, Maps \u0026amp; Sets ES6 Classes Modern alternative to constructive function syntax ES6 classes work exactly like constructor classes ES6 Classes do not behave like classes in \u0026ldquo;classical OOP\u0026rdquo; Object.create() Easiest \u0026amp; most straight-forward way to create objects Not commmonly used. Constructor Functions\r#\rconsole.log(`${fatherName} is your father`); let x = 6; var y = 9; console.log(x, y); Note - Never create Functions inside constructor functions.\n// Constructor Function const Person = function (firstName, birthYear) { this.firstName = firstName; this.birthYear = birthYear; this.calcAge = 2024 - this.birthYear; }; console.log(new Person(\u0026#34;Jonas\u0026#34;, 1994)); // 1. New empty object is created // 2. Function is called, this = empty object // 3. The empty object is linked to a prototype // 4. Function automatically returns empty object const matilda = new Person(\u0026#34;matilda\u0026#34;, 2017); const jack = new Person(\u0026#34;Jack\u0026#34;, 1975); console.log(matilda, jack); console.log(jack instanceof Person); // Checking if an object is an isntance of the constructor function // Output Person {firstName: \u0026#39;Jonas\u0026#39;, birthYear: 1994, calcAge: 30} Person {firstName: \u0026#39;matilda\u0026#39;, birthYear: 2017, calcAge: 7} Person {firstName: \u0026#39;Jack\u0026#39;, birthYear: 1975, calcAge: 49} true Prototypes\r#\rDocument Object Model\r#\rDOM - Document Object Model\nTree-like representation of the contents of a webpage - a tree of \u0026ldquo;nodes\u0026rdquo; with different relationships depending on how they\u0026rsquo;re arranged in the HTML doc.\nEvents\r#\rThree methods of declaring Events\nMethod 1\n\u0026lt;button onclick=\u0026#34;alert(\u0026#39;Hello World\u0026#39;)\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; This method is not prefered because it makes the HTML file look clunky and there is less manipulation possible with this method.\nMethod 2\n\u0026lt;!-- the HTML file --\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; // the JavaScript file const btn = document.querySelector(\u0026#34;#btn\u0026#34;); btn.onclick = () =\u0026gt; alert(\u0026#34;Hello World\u0026#34;); Method 3\n\u0026lt;!-- the HTML file --\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me Too\u0026lt;/button\u0026gt; // the JavaScript file const btn = document.querySelector(\u0026#34;#btn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { alert(\u0026#34;Hello World\u0026#34;); }); Method 3 allows for separation of concerns\nAttaching listeners to groups of nodes\r#\r\u0026lt;div id=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;1\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;2\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;3\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; // buttons is a node list. It looks and acts much like an array. const buttons = document.querySelectorAll(\u0026#34;button\u0026#34;); // we use the .forEach method to iterate through each button buttons.forEach((button) =\u0026gt; { // and for each one we add a \u0026#39;click\u0026#39; listener button.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { alert(button.id); }); "},{"id":7,"href":"/notes/docs/general/unix-commands/","title":"Linux","section":"Docs","content":"\rLinux\r#\rUNIX CC | Linux CC | TLDP | Glossary | Bash Shell |\nExplain Shell - Type Linux Command for Documentation |\nBash Guide | Advanced Bash Scripting |\nPackage Management CC | Distrowatch |\nForum : LinuxQuestions.Org Forum | Nixers |\nTutorials : Jeremy Morgan |\nDistro Corner\r#\rArch Linux\r#\rArch Wiki | FAQ | Pacman | Pacman Tips \u0026amp; Tricks |\nManjaro - Docs, Forum |\nEndeavour OS - Forum |\nGaruda Linux - Docs \u0026amp; Forum |\nDebian\r#\rDebian Distro Latest Download - User Forum, Debian Packages | Documentation | APT User Guide\nUbuntu\r#\rOfficial: Ubuntu Desktop - Documentation, Tutorials, Forums, Flavors | Ubuntu Server, WSL |\nOthers Zorin OS | Pop! OS | MX Linux - Forum | AntiX Linux - Forum |\nLinux Mint\r#\rMint Download - Documentation, Forums, FAQ |\nMisc\r#\rFedora - Workstation, Documentation, Forum | Atomic Desktops - Forum | Server - Docs, DNF Package Manager |\nOpenSUSE - TumbleWeed, Leap | Docs, Startup Guide | Zypper Package Manager |\n"},{"id":8,"href":"/notes/docs/general/misc/","title":"Misc","section":"Docs","content":"\rMisc - All Things Miscellaneous\r#\rDocumentation\r#\rLink Decsription Learn X in Y Community-driven site where you learn your favorite tool/lang in minutes! DevDocs Documentation for many tools \u0026amp; langs Misc\r#\rLink Decsription Libraries.io Open Source Packages, Frmaeworks Etc. VIM Adventures Game Learn VIM playing the VIM game HTML 2 JSX Convert HTML to JSX "},{"id":9,"href":"/notes/docs/db/mongodb/","title":"Mongo DB","section":"Docs","content":"\rMongoDB\r#\rInstallation Link : MongoDB MongoDB is a document database. It is open-source and cross platform. It stores data in a type of JSON format called BSON. A record in MongoDB is a document, which is a data structure composed of key value pairs similar to the structure of JSON objects. Records in a MongoDB database are called documents, and the field values may include numbers, strings, booleans, arrays, or even nested documents. Database Management Systems\r#\rA special software program that helps users create and maintain a database\nMakes it easy to manage large amounts of information Handles security Backups Importing/Exporting Data Concurrency Interacts with software applications CRUD - Create Read Update Delete Non-Relational (noSQL / not just SQL) Data is organized in a non-traditional way, using data structures other than tables, which are used in Relational Database Management Systems. Example of Relational Database Management Systems: A. Key-Value stores B. Documents (JSON, XML etc) C. Graphs D. Flexible Tables Query \u0026ndash; A request made to Database Management system for specific information. Eg : A Google Search is a query. Basic Commands\r#\rCommand Action mongosh Open a connection to your local MongoDB instance. All other commands will be run within this mongosh connection db.help() Text output listing common methods on the db object. db.users.help() Shows help for database methods. db.\u0026lt;collection\u0026gt;.help() Show help on collection methods. The collection can be the name of an existing collection or a non-existing collection. show dbs Print a list of all databases on the server. use \u0026lt;db\u0026gt; Switch current database to . The mongo shell variable db is set to the current database. show collections Print a list of all collections for the current database show users Print a list of all users for the current database show roles Print a list of all roles, both user-defined and built-in, for the current database show profile Print the five most recent operations that took 1 ms. or more on databases with profiling enabled show databases Print a list of all existing databases available to the current user. exit Exit the mongosh session CRUD Operations\r#\rCRUD - Create Replace Update Delete\nCreate Documents\r#\rCommand Description show dbs Shows all the available databases bd Lists the currently active database use blog Creates and activates a database named blog. Note : In MongoDB, a database is not actually created until it is populated. db.collectionName.insertOne({att1 : \u0026quot;attr1\u0026quot;, att2 : \u0026quot;attr2\u0026quot;}) Inserts single record into the collection. collectionName = name of the collection in the active database db.collectionName.insertMany({att1 : \u0026quot;attr1\u0026quot;, att2 : \u0026quot;attr2\u0026quot;}, {att1 : \u0026quot;attr1\u0026quot;, att2 : \u0026quot;attr2\u0026quot;}) Inserts multiple records into the collection Whenever a record is successfully entered into the collection, \u0026ldquo;acknowledged : true\u0026rdquo; will be displayed along with ID for the entry. Each entry has an ID allotted to it unless custom ID is entered, like below :\ndb.collectionName.insertOne({ _id: 4, att1: \u0026#34;attr1\u0026#34;, att2: \u0026#34;attr2\u0026#34; }); Update, Delete and Replace Documents\r#\rCommand Description db.students.updateOne({major:\u0026quot;Biology\u0026quot;}, {$set: {major:\u0026quot;BioScience\u0026quot;}}) Updates only one record no matter how many records exist with same value for the chosen field db.students.updateMany({gpa:3.5}, {$set:{gpa:3.1}}) Updates all records matching the field value db.posts.updateMany({}, { $inc: {likes:1} }) Updates all the records of collection posts, by incrementing likes field by 1 db.students.replaceOne({major : \u0026quot;BioScience\u0026quot;}, {major : \u0026quot;Gender Studies\u0026quot;, gpa : 3.2, name : \u0026quot;Eric\u0026quot;}) Replaces a documents values with others (major category from BioScience to Gender Studies) db.students.deleteOne({gpa : {$lte : 3.2}}) Deleting only one record using the criteria (gpa \u0026lt;= 3.2) Query Commands\r#\rSyntax Description db.collectionName.find({}) Returns all records db.collectionName.find({}, {_id : 0}) Returns everything except _id field db.collectionName.find({}, {_id : 0}).limit(3) Returns everything except _id field but limits records to 3 db.collectionName.find({}, {_id : 0}).skip(2).limit(3) Returns everything except _id field but skips 2 records \u0026amp; limits records to 3 db.students.find({}, {_id: 0}).sort({gpa : -1, name : 1}) Returns records and sorts them first by gpa in desc (-1) and by name db.students.find({major : \u0026quot;Biology\u0026quot;}, {_id: 0}) Filters the records by major, in this case that would be Biology db.students.find({$or: [{major : \u0026quot;Medicine\u0026quot;}, {name : \u0026quot;Jack\u0026quot;}]}, {_id: 0}) Returns records which either have major as Medicine or have name as Jack (OR Condition) db.students.find({gpa : {$gt: 3.0}}, {_id: 0}) Returns records where gpa is greater than ($gt ; $lt for less than) 3.0 db.students.find({gpa : {$lte: 3.5}}, {_id: 0}) Returns records where gpa is less than or equal to 3.5 db.students.find({name: {$in: ['Mike', 'Pike']}}, {_id:0}) Returns records that match any of the names in the list ($in:) db.students.find({awards:{$exists: true}}, {_id:0}) Returns all records for which the entry for awards field exists. Boolean True/False db.students.find({name:{$type : 2}}, {_id:0}) Returns all records where the name field is of data type 2 (string) Note : MongoDB databases have various datatypes of same field db.students.find({\u0026quot;grades.0\u0026quot;: 90}, {_id:0}) Returns all records where the grades field has its first element(index : 0) equal to 90 db.students.find({grades: {$elemMatch: {\\$gte: 90}}}, {_id:0}) Returns all records where the grades field has any of its elements grater than or equal to 90 db.students.find({grades : {$size : 4}}, {_id:0}) Returns records where the No. of elements in the grades field = 4 Upsert Documents\r#\rUpsert : Updates a document, but if the entry is not found, inserts it.\ndb.posts.updateOne( { title: \u0026#34;Post Title 5\u0026#34; }, { $set: { title: \u0026#34;Post Title 5\u0026#34;, body: \u0026#34;Body of post.\u0026#34;, category: \u0026#34;Event\u0026#34;, likes: 5, tags: [\u0026#34;news\u0026#34;, \u0026#34;events\u0026#34;], date: Date(), }, }, { upsert: true } ); MongoDB Operators\r#\rComparison Operators\r#\rSign Description $ne Not Equal to $eq Equal to $gt Greater Than $lt Less Than $gte Greater Than or equal to $lte Less Than or Equal to $in Value is matched within an array Logical Operators\r#\rSign Description $and Returns documents where both queries match $or Returns documents where either query matches $nor Returns documents where both queries fail to match $not Returns documents where the query does not match Evaluation Operators\r#\rSign Description $regex Allows the use of regular expressions when evaluating field values $text Performs a text search $where Uses a JavaScript expression to match documents Update Operators\r#\rSign Description $currentDate Sets the field value to the current date $inc Increments the field value $rename Renames the field $set Sets the value of the field $unset Removes the field from the document Array Operators\r#\rSign Description $addToSet Adds distinct elements to an array $pop Removes the first or last element of an array $pull Removes all elements from an array that match the query $push Adds an element to an array DataTypes In MongoDB\r#\r{ string : \u0026#34;Text String\u0026#34;, int : 420, double : 3.654, boolean : True, // False array : [1, 2, 3], object : {att1 : \u0026#34;attr1\u0026#34;, att2 : \u0026#34;attr2\u0026#34;, att3 : \u0026#34;attr3\u0026#34; }, date : new Date(\u0026#34;\u0026lt;YYYY-mm-dd\u0026gt;\u0026#34;), object_id : \u0026lt;ObjectId\u0026gt; no_value : null } Additional Datatypes\nTimestamp Binary data Regular expressions JS Code BSON Data Identifiers\r#\rType Number Alias Notes Double 1 \u0026ldquo;double\u0026rdquo; String 2 \u0026ldquo;string\u0026rdquo; Object 3 \u0026ldquo;object\u0026rdquo; Array 4 \u0026ldquo;array\u0026rdquo; Binary data 5 \u0026ldquo;binData\u0026rdquo; Undefined 6 \u0026ldquo;undefined\u0026rdquo; Deprecated. ObjectId 7 \u0026ldquo;objectId\u0026rdquo; Boolean 8 \u0026ldquo;bool\u0026rdquo; Date 9 \u0026ldquo;date\u0026rdquo; Null 10 \u0026ldquo;null\u0026rdquo; Regular Expression 11 \u0026ldquo;regex\u0026rdquo; DBPointer 12 \u0026ldquo;dbPointer\u0026rdquo; Deprecated. JavaScript 13 \u0026ldquo;javascript\u0026rdquo; Symbol 14 \u0026ldquo;symbol\u0026rdquo; Deprecated. JavaScript code with scope 15 \u0026ldquo;javascriptWithScope\u0026rdquo; Deprecated in MongoDB 4.4. 32-bit integer 16 \u0026ldquo;int\u0026rdquo; Timestamp 17 \u0026ldquo;timestamp\u0026rdquo; 64-bit integer 18 \u0026ldquo;long\u0026rdquo; Decimal128 19 \u0026ldquo;decimal\u0026rdquo; Min key -1 \u0026ldquo;minKey\u0026rdquo; Max key 127 \u0026ldquo;maxKey\u0026rdquo; "},{"id":10,"href":"/notes/docs/misc/mysql/","title":"MySQL","section":"Docs","content":"\rMySQL\r#\rResources\r#\rPostgreSQL Official | SQLite\nCheatsheet | All DB SQL Injection CC | SQL Zoo | SQL Practise | Data Lemur - SQL practise, interviews |\nSQL Bolt | SQL PD | SQL Murder Mystery- SQLite | Pagila |\nMySQL Installation Link : MySQL\nNotes:\nDBMS - Data Base Management System RDBMS - Relational Data Base Management System SQL - Structured Query Language SQL is basically 4 kinds of languages in one package: Data Query Language Data Definition Language Data Control Language Data Manipulation Language Commenting in MySQL :\n# One-line comment - One-line comment /*Multi Line Comment*/ Tables\r#\rA table is a database object that is made of rows and columns. It contains data.Table is created using CREATE TABLE command A field is a column in a table that is supposed to provide specific info about all the records in the table A record is a row in a table. It is also called horizontal entity while field is the vertical entity of the table A NULL value is no value, it is neither a space nor a zero, it is nothing Creating a Table\r#\rCREATE TABLE tableName ( column1 datatype, column2 datatype, PRIMARY KEY(column1) -- column1 becomes primary key ); To check if the table is created or not, run DESC tableName;\nCreating a table from other Tables\r#\rCREATE TABLE newTable AS SELECT column1, column2.....column5 FROM oldTable [WHERE]; # WHERE condition is optional Command Description DROP TABLE tabName; Deletes a Table SHOW TABLES; / DESC tableName; Verify the existence of a Table TRUNCATE table_name Deletes all the records existing inside a table but not the Table itself Using INSERT INTO query to enter data into tables\r#\rINSERT INTO tableName column1, column2, column3 VALUES value1, value2, value3; Notes :\nWhen the order of the input is in the same order as the field/column order, the columns in the code are omitted SELECT * FROM tableName; to verify if the data was entered. Populating a Table With Data From Other Table\r#\rThe two tables must be compatible for this to work.\nINSERT INTO TABLE1 column1, column2, column3 SELECT column1, column2, column3 FROM table2 [WHERE]; -- optional WHERE condition Inserting Multiple Rows Into a Table In One Go\r#\rINSERT INTO table(column1) VALUES (value1), (value2), (value3); -- 3 rows of data inserted into column1 Alter Table\r#\rThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table. It is also used to add and drop various constraints on an existing table.\n-- Adding Column ALTER TABLE table_name ADD column_name datatype; -- Dropping Column ALTER TABLE table_name DROP COLUMN column_name; -- Modify Column by changing datatype ALTER TABLE table_name MODIFY COLUMN column_name datatype; Querying Functions\r#\rNested Query\r#\rName all the employees who have sold over $30,000 to a single client (problem from Mike Dane\u0026rsquo;s Course)\nSELECT employee.firstName, employee.lastName FROM employee WHERE employee.emp_id IN ( SELECT works_with.emp_id FROM works_with WHERE works_with.total_sales \u0026gt; 30000 ); -- Nested Query SELECT Query\r#\rSELECT * FROM tableName; -- Use * to select every column in the table SELECT firstName, lastName FROM employees; -- Selects firstName, lastName columns from the table employees SELECT fistName, lastName CONCAT(firstName, lastName) AS fullName FROM employees; -- Selects firstName, lastName and creates a new column fullName -- which is a concatenation of firstName, whitespace and lastName columns Note: Arithmetic Operations can also be performed on the columns during SELECT query\nWHERE Clause\r#\rSELECT * FROM customers WHERE points \u0026gt; 30000; ORDER BY Clause\r#\rSELECT * FROM customers ORDER BY state; -- DESC/ASC keywords to order in descending/ascending order respectively. SELECT firstName, lastName FROM customers ORDER BY 1, 2 In the above query, the records are first sorted by firstName followed by lastName. This approach is not recommended and the column name approach should be followed instead.\nGROUP BY Clause\r#\r-- MOSH SELECT client_id, SUM(invoice_total) AS total_sales FROM invoices GROUP BY client_id ORDER BY total_sales DESC; -- MOSH SELECT date, pm.name AS payment_method SUM(amount) AS total_payments FROM payments p JOIN payment_methods AS total_payments ON p.payment_method = pm.payment_method_id GROUP BY date, payment_method ORDER BY date; HAVING Clause\r#\rHAVING Clause filters data offer GROUP BY clause is applied\nSELECT client_id, SUM(invoice_total) AS total_sales FROM invoices WHERE GROUP BY client_id HAVING total_sales \u0026gt; 500; USING Clause\r#\rIf two columns in different tables are to be joined and they have same name (same EXACT name) USING clause is used to reduce length \u0026amp; increase code readability.\nSELECT o.order_id, c.first_name, sh.name AS shipper FROM orders o JOIN customers c USING (customer_id) LEFT JOIN shippers sh USING (shipper_id) SELECT payments.date, clients.name, payments.amount, payment_methods.name FROM payments JOIN clients USING (client_id) JOIN payment_methods ON payments payment_method = payment_methods.payment_method_id Datatypes in MySQL\r#\rNumeric Data Types\r#\rBig INT - Really Big Values INT - Big Values smallint - -32,768 to 32,768 tinyint - 0 to 255 decimal(m, d) float(m, d) numeric(m, d) Optional Parameters : m - display length, d - No. of decimals\nDate \u0026amp; Time Data Types\r#\rDate Time - (YYYY-MM-DD HH:MM:SS) Date - (YYYY-MM-DD) Time - (HH:MM:SS) Year - (YYYY) Character Data Types\r#\rchar(m) VARCHAR(m) Text - To store large amount of text Optional Parameters : m - display length, d - No. of decimals\nImages\r#\rBLOB - Binary Large Object MySQL Constraints\r#\rConstraint Explanation NOT NULL CONSTRAINT Apply this constraint if a field has to get some value for every row DEFAULT CONSTRAINT While populating a table, if a column misses out on input, then the default value will be used to fill the entry UNIQUE CONSTRAINT This constraint makes sure that all the values entered for the field to which the constraint is applied are unique i.e., different Error message is generated if duplicate values are input. PRIMARY KEY CONSTRAINT This constraint is a combination of NOT NULL \u0026amp; UNIQUE constraints. In this constraint, some value would have to be provided for each record(row) and entered values must be unique \u0026amp; not have duplicates. CREATE TABLE student ( id INT Primary, name VARCHAR(20) NOTNULL, majors VARCHAR(20) UNIQUE ); Using Auto Increment for id column\nCREATE TABLE student ( id INT AUTO_INCREMENT, name VARCHAR(20) ); Database Operations\r#\rCommand Function CREATE DATABASE dbName Create Database USE dbName Use a Database DROP database dbName Drop Database Note : The delete is permanent Trivial Functions\r#\rMIN() \u0026amp; MAX() Functions\r#\rSELECT MIN(column) FROM tableName [WHERE]; SELECT MAX(column) FROM tableName [WHERE]; COUNT() Functions\r#\rSELECT COUNT(*) FROM products [WHERE]; SUM() Function\r#\rSELECT SUM(column) FROM tableName [WHERE]; DELETE Function\r#\rDELETE FROM tableName [WHERE]; DISTINCT Function\r#\rSELECT DISTINCT columnName FROM tableName; -- Picks all the distinct values in the selected column UNION Function\r#\rUnion can be used to join two rows from different tables.\nUnifies two different columns into one column. Each SELECT query should have same No. of columns \u0026amp; same datatype.\nSELECT columnX FROM table1 UNION SELECT branchName FROM table2; Operators in MySQL\r#\rArithmetic Operators\r#\rAddition (+) Subtraction (-) Multiplication (*) Division (/) Modular Division (%) Comparison Operators\r#\rEqual (=) Greater Than (\u0026gt;) Lesser Than (\u0026lt;) Greater Than or Equal to (\u0026gt;=) Lesser Than or Equal to(\u0026lt;=) Not Equal to (\u0026lt;\u0026gt; or !=) Examples\nSELECT * FROM employees WHERE age \u0026gt;= 30 AND salary \u0026gt;= 15000; Logical Operators\r#\rOR ISNULL ALL AND BETWEEN IN LIKE Examples\nSELECT * FROM employees WHERE salary IS NULL; SELECT * FROM employees WHERE name LIKE \u0026#39;p%\u0026#39; -- % is a wildcard character SELECT * FROM employee WHERE age IN (28, 30, 36); REGEXP Operators\r#\rSELECT * FROM customers WHERE last_name REGEXP \u0026#39;^field\u0026#39; Command Search %b search term has last character b %b% search term has \u0026lsquo;b\u0026rsquo; in it somewhere -y second character is y \u0026ndash;z third character is z % any No. of characters ^ beginning of a string $ end of a string / or | logical OR [abcd] Searches for the chars inside the brackets [a-f] Searches for the chars in the range REGEXP Operator Examples\n-- MOSH\u0026#39;S DATABASES SELECT * FROM customers WHERE last_name REGEXP \u0026#39;field\u0026#39; -- O/P : Brushfield SELECT * FROM customers WHERE last_name REGEXP \u0026#39;field$\u0026#39; -- O/P : Brushfield SELECT * FROM customers WHERE last_name REGEXP \u0026#39;^field\u0026#39; -- O/P : No Result. No last name starting with field exist. SELECT * FROM customers WHERE last_name REGEXP \u0026#39;field|mac\u0026#39; -- O/P : MacCaffey, Brushfield SELECT * FROM customers WHERE last_name REGEXP \u0026#39;^field|mac|rose\u0026#39; -- O/P : MacCaffrey, Roseburgh SELECT * FROM customers WHERE last_name REGEXP \u0026#39;field$|mac|rose\u0026#39; -- O/P : MacCaffrey, Brushfield, Roseburgh SELECT * FROM customers WHERE last_name REGEXP \u0026#39;[gim]e\u0026#39; -- Looks for customers with lastname containing ge or ie or me -- O/P : Brushfield, Boagey SELECT * FROM customers WHERE last_name REGEXP \u0026#39;e[a-h]\u0026#39; -- Looks for lastnames containing ea, eb, ec,.........eh -- O/P: Roseburgh, Naseby Joining In MySQL\r#\rInner Join\r#\rA JOIN command is INNER JOIN by default.\n-- MOSH USE sql_store SELECT oi.order_id, oi.product_id, p.name, p.name, oi.quantity, oi.unit_price FROM products p JOIN order_items oi ON oi.product_id = p.product_id; Joining Along Databases\r#\r-- MOSH SELECT * FROM sql_store.order_items oi JOIN products p ON oi.product_id = p.product_id; Self JOIN\r#\rUSE sql_hr SELECT e.employee_id, e.first_name, m.first_name AS manager FROM employees e JOIN employees m ON e.reports_to = m.employee_id; Joining Multiple Tables\r#\r-- MOSH USE sql_store SELECT o.order_id, o.order_date, c.first_name, c.last_name, os.name AS status FROM orders o JOIN customers c ON o customer_id = c.customer_id JOIN order_statuses os ON o.status = os.order_status_id; -- MOSH EXERCISE USE sql_invoicing SELECT c.name, p.invoice_id, p.date, p.amount, pm.name AS pay_mode FROM payments p JOIN clients c ON p.client_id = c.client_id JOIN payment_methods pm ON p.payment_method = pm.payment-method-id; Compound JOIN Conditions\r#\rCompound Join is done when there are more than one primary key existing ina table and the record cannot be chosen uniquely with just one join.\nUSE sql_store\nSELECT * FROM order_items oi JOIN order_item_notes oin ON oi.order_id = oin.order_id AND oi.product_id = oin.product_id; Implicit Join\r#\r-- MOSH SELECT * FROM orders o, customers c WHERE o.customer_id = c.customer_id; Note: Failure to include the WHERE condition would result in all columns in table 1 joining to all the columns in table 2\nOuter Join\r#\rLeft \u0026amp; Right Join\r#\rAs a rule, avoid RIGHT JOIN as it may make code-reading harder\n-- MOSH SELECT c.customer_id, c.first_name, o.order_id FROM customers c RIGHT JOIN orders o ON c.customer_id = o.customer_id ORDER BY c.customer_id; NOTE : The word OUTER after RIGHT \u0026amp; before JOIN keywords is optional\nOuter Joins Between Multiple Tables\r#\r-- MOSH SELECT c.customer_id, c.first_name, o.order_id, sh.name AS shipper FROM customers c LEFT JOIN orders o ON c.customers_id = o.customer_id LEFT JOIN shippers sh ON o.shipper_id = sh.shipper_id ORDER BY c.customer_id; -- MOSH SELECT o.order_id, o.order_date, c.first_name AS customer, sh.name AS shipper, os.name AS status FROM orders o JOIN customers c ON o.customers_id = c.customers_id LEFT JOIN shippers sh ON o.shipper_id = sh.shipper_id, JOIN order_statuses os ON o.status = os.order_status_id; SELF OUTER JOINS\r#\rIn the previous self join which is INNER, the manager\u0026rsquo;s record does not get shown because the manager doesn\u0026rsquo;t report to the manager. In order to include this record too, SELF OUTER JOIN is used.\nSELECT e.employee_id, e.first_name, m.first_name AS manager FROM employees e LEFT JOIN employees m ON e.reports_to = m.employees_id; NATURAL JOIN \u0026amp; CROSS JOIN\r#\rNatural Join may produce unexpected results. Use with caution.\n-- MOSH, NATURAL JOIN SELECT o.order_id, c.first_name FROM orders o NATURAL JOIN customers c; -- MOSH, CROSS JOIN SELECT c.first_name AS customer, p.name AS product, FROM customers c CROSS JOIN products p -- Explicit Syntax ORDER BY c.first_name; SELECT c.first_name AS customer, p.name AS product FROM customers c, orders o -- Implicit Syntax ORDER BY c.first_name; Unions in MySQL\r#\rSELECT order_id, order_date, \u0026#39;Active\u0026#39; AS status FROM orders WHERE order_datwe \u0026gt;= \u0026#39;2019-01-01\u0026#39;; UNION SELECT order_id, order_date, \u0026#39;Archived\u0026#39; AS status FROM orders WHERE order_date \u0026lt; \u0026#39;2019-01-01\u0026#39;; Inserting Hierarchical Rows\r#\rINSERT INTO orders( customer_id, order_date, status ) VALUES(1, \u0026#39;2019-01-02\u0026#39;, 1); INSERT INTO order_items VALUES(LAST_INSERT_ID(), 1, 1, 2.95), (LAST_INSERT_ID(), 2, 1, 3.95); "},{"id":11,"href":"/notes/docs/web-dev/node/","title":"NodeJS","section":"Docs","content":"\rNode JS\r#\rA JavaScript Runtime built on Google\u0026rsquo;s OpenSource V8 Javascript Engine Node JS is an environment in which a program written in JS can be executed.\nPros for Node JS\r#\rSingle threaded, based on event driven, non-blocking I/O model. Perfect for building superfast and scalable data-intensive apps. JavaScript for the entire stack resulting in faster and efficient development NPM : Huge library of open-source packages available for free. Very active developer community. Use Cases for Node\r#\rAPI with database behind it (preferably NoSQL) Data Streaming (eg., YouTube) Real time chat apps Server-side web apps Non-use cases\r#\rApplications with heavy server-side processing (CPU intensive) like video compression, audio compression etc. Ruby on Rails or PHP or Python is good for these apps. Node Terminal\r#\rTo enter node, type node in the terminal\nTo exit, write .exit in the node terminal\n\u0026gt; 3 + 8 11 \u0026gt; _ + 11 22 //carries previous results into current command Asynchronous vs Synchronous Code\r#\rAsync code does not block the execution of consecutive lines of code while Synchronous code does. "},{"id":12,"href":"/notes/docs/ds/python/","title":"Python","section":"Docs","content":"\rPython Notes\r#\rRealPython |\nProgramming Tips\r#\rUse \u0026rsquo;\u0026rsquo;\u0026rsquo; \u0026lsquo;\u0026rsquo;\u0026rsquo;, \u0026rsquo;\u0026rsquo; \u0026rsquo;\u0026rsquo; or \u0026rsquo; \u0026rsquo; to write comments in the script. Multiple Assignment in Python : Example : a, b, c, good = 5, True, \u0026lsquo;Stranger\u0026rsquo; The following keywords are reserved in Python : and assert break class continue def del elif in is lambda not or else except exec finally for from global if import while with pass print raise return try yield Python has one unary operator, Unary Minus Operator. If a number is positive, it becomes negative when preceded by a unary minus operator. Python does not support prefix and postfix increment as well as decrement operators. Parentheses can change the order in which an operator is applied. The operator in the parenthesis is applied first even if there is a higher priority operator in the expression. Operators are associated from left to right. This means that operators with same precedence are evaluated in a left to right manner. Always prefer slicing over looping. Python is more forgiving when stepping over the range when slicing than when indexing or looping. Operators in Python\r#\rOperator Description ** Exponentiation ~, +, - Complement, unary plus and unary minus *, /, %, // Multiply, divide, modulo and floor division +, - Addition and Subtraction \u0026raquo;, \u0026laquo; Right and Left bitwise shift \u0026amp; Bitwise \u0026lsquo;AND\u0026rsquo; ^ | Bitwise exclusive \u0026lsquo;OR\u0026rsquo; and regular \u0026lsquo;AND\u0026rsquo; \u0026lt;= \u0026lt; \u0026gt; \u0026gt;= Comparison Operators \u0026lt;\u0026gt; == != Equality Operators =, %=, /=, //=, -=, +=, *=, **= Assignment Operators is, is not Identity Operators in, not in Membership Operators not, or, and Logical Operators Shift Operators\r#\rx = 0001 1101\nShift Left (\u0026laquo;) x \u0026laquo; 1 gives result 0011 1010\nShift Right (\u0026raquo;) x \u0026raquo; 1 gives result 0000 1110\nBitwise Operators\r#\rBitwise AND(\u0026amp;) The bit operand is ANDed with the corresponding bit in the second operand. The bitwise AND operator compares each bit of its first operand with the corresponding bit of its second operand. If both bits are 1, the corresponding bit in the result is 1 and 0 otherwise. 10101010 \u0026amp; 01010101 = 00000000\nBitwise OR(|) The bit operand is ORed with the corresponding bit in the second operand. The bitwise OR operator compares each bit of its first operand with the corresponding bit of its second operand. If one or both of the bits is 1, the corresponding bit in the result is 1 and 0 otherwise. 10101010 | 01010101 = 11111111\nBitwise XOR(^) The bit operand is XORed with the corresponding bit in the second operand. The bitwise XOR operator compares each bit of its first operand with the corresponding bit of its second operand. If one of the bits is 1, the corresponding bit in the result is 1 and 0 otherwise. 10101010 ^ 01010101 = 11111111\nBitwise NOT(~) The bitwise NOT or Complementary operator, is a unary operation, which performs logical negation on each bit of the operand. By performing negation of each bit, it actually produces the ones\u0026rsquo; complement of the given binary value. Bitwise NOT operator sets the bit to 1, if it was initially 0 and sets the bit to 1, if it was initially 0 and sets it to 0, if it was initially 1. ~10101011 = 01010100\nLogical Operator\r#\rCommand Syntax Comment AND (\u0026amp;\u0026amp;) a \u0026gt; b \u0026amp;\u0026amp; b \u0026gt; c Both expressions must be conditional OR (||) a \u0026gt; b || b \u0026gt; c Both expressions must be conditional NOT (!) b != a Both expressions must be conditional Truth Table\nA B A\u0026amp;\u0026amp;B A B A||B A !A 0 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 0 1 - - 1 1 1 1 1 1 - - Type Conversion Functions\r#\rFunction Description int(x) Converts x to an integer long(x) Converts x to a long integer float(x) Converts x to a floating point number str(x) Converts x to a string tuple(x) Converts x to a tuple list(x) Converts x to a list set(x) Converts x to a set ord(x) Converts a single character to its integer value oct(x) Converts an integer to its octal value hex(x) Converts an integer to a hexadecimal string chr(x) Converts an integer to a character unichr(x) Converts an integer to a unicode character dict(x) Creates a dictionary if x contains a key-value pair Map(), Filter() \u0026amp; Reduce() Functions\r#\rmap() Function\r#\rmap() function applies a particular function to every element in the list.\nSyntax : map(function, sequence) Notes\nThe function must have as many arguments as there are sequences Each argument is called with the coresponding item from each sequence (or None if one sequence is shorter then another) Demo 1 : A program that adds 2 to every element in the list\ndef add_2(x): x += 2 return x num_list = [1,2,3,4,5,6,7,8,8,10] print(\u0026#34;Original list is : \u0026#34;, num_list) new_list = list(map(add_2,num_list)) print(\u0026#34;Modified List is :\u0026#34;, new_list) :arrow_double_down:\nOriginal list is : [1, 2, 3, 4, 5, 6, 7, 8, 8, 10]\rModified List is : [3, 4, 5, 6, 7, 8, 9, 10, 10, 12] Demo 2 : Program where more than one sequence is passed to the map() function.\ndef add(x,y): return x + y list1 = [1,2,3,4,5] list2 = [6,7,8,9,10] list3 = list(map(add,list1,list2)) print(\u0026#34;Sum of list1 and list2 is : \u0026#34;,list3) :arrow_double_down:\nSum of list1 and list2 is : [7, 9, 11, 13, 15] filter() Function\r#\rfilter() function constructs a list from those elements of the list for which a function returns True.\nSyntax : filter(function, sequence)\nNotes\nIf the sequence is a string, Unicode or a Tuple, then the result will be of the same type, otherwise it is always a list. Functions that return a Boolean value are called predicates. Demo 1 :\ndef check(x): if (x % 2 == 0 or x % 4 == 0): return 1 # Call check for every value between 2 to 21. evens = list(filter(check,range(2,22))) print(evens) :arrow_double_down:\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20] reduce() Functions\r#\rThe reduce() function returns a single value generated by calling the function on the first two itemsof the sequence, then on the result and the next item and so on.\nSyntax : reduce(function, sequence)\ndef add(x,y): return x + y num_list = [1,2,3,4,5] print(\u0026#39;Sum of the values in list =\u0026#39;) print(functools.reduce(add,num_list)) :arrow_double_down:\nSum of the values in list =\r15 reduce() function is not imported by default. Import functools module to use reduce function. If there is only one item in the sequence, then its value will be returned. If the sequence is empty, then an exception is raised. Creating a list in a very extensive range will generate a MemoryError or OverflowError. Eg. list = [5*i for i in range(100*100)\nWhen this statement is executed, you will get the system overflow problem. Python window will stop responding and you will have to press ==Ctrl+C== to get out of this state.\nRandom Module\r#\rchoice() Attribute\nimport random coin = random(choice([\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;])) print(coin) :arrow_double_down:\nheads RANDINT()\nimport random num = random.randint(1,10) print(num) :arrow_double_down:\n9 SHUFFLE()\nimport random cards = [\u0026#39;jack\u0026#39;,\u0026#39;queen\u0026#39;,\u0026#39;jack\u0026#39;] random.shuffle(cards) # The list order is shuffled. # print(cards) for card in cards: print(card) :arrow_double_down:\nqueen\rjack\rjack Iteration Functions\r#\renumerate function\r#\rWhen you want to print both index as well as an item in the list, enumerate() is used. The enumerate() function returns an enumerate object which contains the index and value of all the items of the list as tuple. Example\nnum_list = [1,2,3,4,5] for index, i in enumerate(num_list): print(i, \u0026#34; is at index : \u0026#34;,index) :arrow_double_down:\n1 is at index : 0\r2 is at index : 1\r3 is at index : 2\r4 is at index : 3\r5 is at index : 4 range function\r#\rIf you need to print index alone, use range() function Example\nnum_list = [1,2,3,4,5] for i in range(len(num_list)): print(\u0026#34;index : \u0026#34;, i) :arrow_double_down:\nindex : 0\rindex : 1\rindex : 2\rindex : 3\rindex : 4 iter function\r#\rIterator function is used using the built-in iter() function. The iterator is used to loop over the elements of the list. For this, the iterator fetches the value and then automatically points to the next item in the list when it is used with the next() method. Example\nnum_list = [1,2,3,4,5] it = iter(num_list) for i in range(len(num_list)): print(\u0026#34;Element at index \u0026#34;,i, \u0026#34; is : \u0026#34;,next(it)) :arrow_double_down:\nElement at index 0 is : 1\rElement at index 1 is : 2\rElement at index 2 is : 3\rElement at index 3 is : 4\rElement at index 4 is : 5 zip function\r#\rzip() is a built-in function that takes two or more sequences and \u0026lsquo;zips\u0026rsquo; them into a list of tuples. The tuple thus formed has one element from each sequence. If the sequences have different lengths, then the result has the length of the shortest one. Example\ntup_1 = (1,3,4,5,6) list_1 = [\u0026#39;astrisk\u0026#39;, True, 45, 3.1456789] print(list(zip(tup_1, list_1))) :arrow_double_down:\n[(1, \u0026#39;astrisk\u0026#39;), (3, True), (4, 45), (5, 3.1456789)] Trivial Functions\r#\rupdate function\r#\rs = set([1, 2, 3, 4]) t = set([6, 7, 8]) s.update(t) print(s) :arrow_double_down:\n{1, 2, 3, 4, 6, 7, 8} ord \u0026amp; chr Functions\r#\rstr = \u0026#39;r\u0026#39; print(ord(str)) str2 = 112 print(chr(str2)) :arrow_double_down:\n114\rp dir Functions\r#\rdtr = \u0026#34;Hello\u0026#34; print(dir(str)) :arrow_double_down:\n[\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;,\r\u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__getnewargs__\u0026#39;, \u0026#39;__getstate__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;,\r\u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mod__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;,\r\u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__rmod__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;,\r\u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;capitalize\u0026#39;, \u0026#39;casefold\u0026#39;, \u0026#39;center\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;encode\u0026#39;, \u0026#39;endswith\u0026#39;, \u0026#39;expandtabs\u0026#39;,\r\u0026#39;find\u0026#39;, \u0026#39;format\u0026#39;, \u0026#39;format_map\u0026#39;, \u0026#39;index\u0026#39;, \u0026#39;isalnum\u0026#39;,\r\u0026#39;isalpha\u0026#39;, \u0026#39;isascii\u0026#39;, \u0026#39;isdecimal\u0026#39;, \u0026#39;isdigit\u0026#39;, \u0026#39;isidentifier\u0026#39;, \u0026#39;islower\u0026#39;, \u0026#39;isnumeric\u0026#39;, \u0026#39;isprintable\u0026#39;,\r\u0026#39;isspace\u0026#39;, \u0026#39;istitle\u0026#39;, \u0026#39;isupper\u0026#39;, \u0026#39;join\u0026#39;, \u0026#39;ljust\u0026#39;, \u0026#39;lower\u0026#39;, \u0026#39;lstrip\u0026#39;, \u0026#39;maketrans\u0026#39;, \u0026#39;partition\u0026#39;, \u0026#39;removeprefix\u0026#39;, \u0026#39;removesuffix\u0026#39;,\r\u0026#39;replace\u0026#39;, \u0026#39;rfind\u0026#39;, \u0026#39;rindex\u0026#39;, \u0026#39;rjust\u0026#39;, \u0026#39;rpartition\u0026#39;,\r\u0026#39;rsplit\u0026#39;, \u0026#39;rstrip\u0026#39;, \u0026#39;split\u0026#39;, \u0026#39;splitlines\u0026#39;, \u0026#39;startswith\u0026#39;, \u0026#39;strip\u0026#39;, \u0026#39;swapcase\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;translate\u0026#39;, \u0026#39;upper\u0026#39;, \u0026#39;zfill\u0026#39;] match case Functions\r#\rname = input(\u0026#34;What\u0026#39;s your name?\u0026#34;) match name: case \u0026#39;Harry\u0026#39;| \u0026#39;Hermione\u0026#39; | \u0026#39;Ron\u0026#39;: print(\u0026#39;Gryffindor\u0026#39;) case \u0026#39;Draco\u0026#39;: print(\u0026#39;Slytherin\u0026#39;) case _: print(\u0026#39;Who?\u0026#39;) :arrow_double_down:\nInput In [5]\rmatch name:\r^\rSyntaxError: invalid syntax hash() Function\r#\rPython hash() function is a built-in function and returns the hash value of an object if it has one. The hash value is an integer which is used to quickly compare dictionary keys while looking at a dictionary. Syntax : hash(obj) int_val = 4 str_val = \u0026#39;GeeksforGeeks\u0026#39; flt_val = 24.56 print(\u0026#34;The integer hash value is : \u0026#34; + str(hash(int_val))) print(\u0026#34;The string hash value is : \u0026#34; + str(hash(str_val))) print(\u0026#34;The float hash value is : \u0026#34; + str(hash(flt_val))) :arrow_double_down:\nThe integer hash value is : 4\rThe string hash value is : 7234223982570738077\rThe float hash value is : 1291272085159665688 SYS.ARGV()\r#\rimport sys print(\u0026#34;Hello I am\u0026#34;, sys.argv[1]) :arrow_forward:\nHello, my name is : ---ip=127.0.0.1 Shuffling a deck of cards.\nimport random as rand import itertools as iter # Now we form a deck of cards. deck = list(iter.product(range(1,14), [\u0026#39;Spade\u0026#39;, \u0026#39;Heart\u0026#39;, \u0026#39;Diamond\u0026#39;, \u0026#39;Club\u0026#39;])) # Shuffle the cards. rand.shuffle(deck) # Now we draw three cards. print(\u0026#34;Your combination of cards is :\u0026#34;) for i in range(3): print(deck[i][0], \u0026#34; of \u0026#34;,deck[i][1]) Object Oriented Programming\r#\rClasses define property \u0026amp; behaviour of objects.\nA class is a blue-print while an object is the actual product.\nA class is a collection of objects.\nDefining a class does not create any objects. Objects have to be explicitly created by using syntax :\n`objName = className()`\rA method is a function associated with a class. It defines the operations that the object can execute when it receives a message.\nThe set of values that the object takes at a particular time is known as the ==state of the object==.\nData Abstraction : Refers to the process by which data \u0026amp; functions are defined in such a way that only essential details are revealed \u0026amp; implementation details are hidden.\nData Encapsulation : Also called Data Hiding, this is the technique of packing data \u0026amp; functions into a single component (class) to hide implementation details of a class from the user.\nEncapsulation organizes the data \u0026amp; methosd into a structure that prevents data access by any function (or method) that is not specified in the class. This ensures the integrity of data contained in the object.\nCreating a Class\r#\rclass Computer(): def config(self): print(\u0026#34;i5, 1TB SSD, 32GB RAM\u0026#34;) comp_1 = Computer() Computer.config(comp_1) # Older syntax of calling objects. comp_1.config() # Frequently used syntax to call objects. print(type(comp_1)) # Printing out the object type. :arrow_double_down:\ni5, 1TB SSD, 32GB RAM\ri5, 1TB SSD, 32GB RAM\r\u0026lt;class \u0026#39;__main__.Computer\u0026#39;\u0026gt; __init__ method\r#\r==Program I==\nclass Computer: def __init__(self): print(\u0026#34;The computer specs :\u0026#34;) def config(self): print(\u0026#34;i5, 1TB SSD, 32GB RAM\u0026#34;) comp_1 = Computer() Computer.config(comp_1) # Older syntax of calling objects. comp_1.config() # Frequently used syntax to call objects. print(type(comp_1)) # Printing out the object type. :arrow_double_down:\nThe computer specs :\ri5, 1TB SSD, 32GB RAM\ri5, 1TB SSD, 32GB RAM\r\u0026lt;class \u0026#39;__main__.Computer\u0026#39;\u0026gt; ==Program II==\nclass Computer: def __init__(self, cpu, ram): print(\u0026#34;The computer specs :\u0026#34;) self.cpu = cpu self.ram = ram def config(self): print(\u0026#34;Config is \u0026#34;, self.cpu, self.ram) comp_1 = Computer(\u0026#39;i9\u0026#39;, 16) comp_2 = Computer(\u0026#39;R6 3600\u0026#39;, 32) comp_1.config() comp_2.config() :arrow_double_down:\nThe computer specs :\rThe computer specs :\rConfig is i9 16\rConfig is R6 3600 32 Constructor\r#\r__init__ is a constructor\n==Program==\nclass Computer: def __init__(self): self.name = \u0026#39;Deepak\u0026#39; self.age = 28 def update(self): self.age = 20 def compare(self,other): if self.age == other.age: return True else: return False c1 = Computer() c2 = Computer() c1.update() print(c1.age) if c1.compare(c2): print(\u0026#34;They are same.\u0026#34;) else: print(\u0026#34;They are different.\u0026#34;) :arrow_double_down:\nOutput :\r20\rThey are different. Types of variables in Python - Instance variable \u0026amp; Static Variable\r#\rclass Car: wheels = 4 # Class/Static Variable. def __init__(self): self.mil = 10 # Instance Variable self.com = \u0026#39;BMW\u0026#39; # Instance Variable c1 = Car() c2 = Car() c1.mil = 8 print(c1.com, c1.mil, c1.wheels) print(c2.com, c2.mil, c2.wheels) :arrow_double_down:\nOutput :\rBMW 8 4\rBMW 10 4 Methods in Python\r#\rInstance Methods Class Methods Static Methods class Student: school = \u0026#39;DataMan\u0026#39; def __init__(self, m1, m2, m3): self.m1 = m1 self.m2 = m2 self.m3 = m3 def avg(self): return (self.m1 + self.m2 + self.m3) / 3 def get_m1(self): return self.m1 s1 = Student(34,67,32) s2 = Student(67,32,12) print(s1.avg()) :arrow_double_down:\nOutput :\r44.333333333333336 Tuples\r#\rTuples are useful for records / structures in other programming languages. Unlike lists, Tuples do not support pop(), remove(), append(), insert() etc. methods. If a sequence is specified without parentheses, it is treated as tuple by default. Advantages of tuple over list : A. Tuples can be used as keys for dictionaries but lists cannot be. B. Tuples are best-suited for storing data that is write-protected. C. Tuples can store values of differenet datatypes whereas lists can only store values of same datatype. D. Tuples can be used in place of lists where the number of values is known and small. E. Multiple values from a function can be returned using a tuple. F. Tuples are used to format strings.\nTuples are not just immutable but also acts as records with no field names.Each item in the tuple holds the data for one filed and the position of the item gives the meaning.\nBenefits of using tuples : A. Clarity : Its clear that the length is never going to change. B. Performance : Occupies less memory than a list of same length.\nReferences in a tuple cannot be changed. But if one of those references points to a mutable object, once that object is changed, then the value of the tuple changes.\nTuples with mutable items can be a source of bugs. An object is only hashable if its value cannot ever change. An unhashable tuple cannot be inserted as a dictionary key, or a set element.\nParallel Assignment : Assigning items from an iterable to a tuple of variables.\nlax_coord = (33.9426, -118.408) latitude, longitude = lax_coord print(latitude, longitude) :arrow_double_down:\n33.9426 -118.408 Example for Parallel Assignment\na = 5 b = 10 print(a, b) a, b = b, a print(a, b) :arrow_double_down:\nOutput :\r5 10\r10 5 In function calls, * can be used multiple times\ndef fun(a, b, c, d, *rest): return a, b, c, d, rest :arrow_forward:\nfun(*[1,2], 3, 4, *range(5, 7)) Lists\r#\rAction Syntax Explanation Extend a list list1.extend(list2[0:2]) Adds items 1 to 3 from list2 to list1 Append list1.append(\u0026lsquo;item\u0026rsquo;) Appends \u0026lsquo;item\u0026rsquo; to the end of list1 Insert list1.insert(index,element) Inserts an element at desired index in list1 Clear list1.clear() Clears all elements in the list Pop list1.pop() Eliminates the last element in the list index(element) list1.index(element) Gives the index number of the position in the list or the first instance position if duplicates exist count(element) list1.count(element) Gives out the no. of times an element is repeated in the list. sort() list1.sort() Sorts the list in an ascending order. Uses ASCII values to sort the list elements.Num \u0026lt; Upper \u0026lt; Lower reverse() list.reverse() Sorts the list in an descending order copy() list2 = list1.copy() Copies elements in list1 to create list2. Editing list1 maked edits in list2 bcoz only reference is copied and not the actual elements in the list. Replace() print(list2.replace(\u0026rsquo;elem2\u0026rsquo;,\u0026rsquo;elem1\u0026rsquo;)) Replaces elem1 with elem2 in list2 abs abs.var Gives the absolute number of the variable copy() lst_2 = copy.copy(lst_1) Copies elements from one list to other with distinct id deepcopy() lst_2 = copy.deepcopy(lst_1) Copies elements from one list to other with distinct id. Used when the list has lists within it set() set(list_1) Duplicates in a list or tuple can be eliminated by using set() method List Comprehension list = [i**3 for I in range(5)] Creating a list of cubes for numbers upto 5 enumerate() for index, element in enumerate(list): Used when both both index and item needed to be printed iterator next(list) Used to iterate a list sorted() list2 = sorted(list1) Returns a sorted list. Original list is not sorted max(), min() x = max(list1) Returns the max/min element in the list len() print(len(list1)) Prints the length of a list id(list1) print(id(list1)) Prints the ID of the list List Comprehension\r#\rList = [expression for variable in sequence]\nExamples\ncubes = [i**3 for i in range(1,11)] z = [(x,y) for x in [10,20,30] for y in [40,50,10] if x!= y] print(cubes) print(z) :arrow_forward:\n[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\r[(10, 40), (10, 50), (20, 40), (20, 50), (20, 10), (30, 40), (30, 50), (30, 10)] Caution Creating a list in a very extensive range will generate a MemoryError or OverflowError.\nFile Access Modes\r#\rMode Purpose \u0026ldquo;r\u0026rdquo; (read mode) Open the file for reading. If the file does not exist, a FileNotFoundError is raised. \u0026ldquo;w\u0026rdquo; (write mode) Open the file for writing. If the file exists, its contents are truncated. If the file does not exist in the file path, a new file is created. \u0026ldquo;a\u0026rdquo; (append mode) Open the file for writing, but instead of truncating its contents, new data is added to the end of the file. If the file does not exist in the file path, a new file is created. \u0026ldquo;x\u0026rdquo; (exclusive creation mode) Open the file for writing, but only if the file does not already exist. If the file exists, a FileExistsError is raised. \u0026ldquo;b\u0026rdquo; (binary mode) Open the file in binary mode. When used in combination with other modes, the \u0026ldquo;b\u0026rdquo; mode changes the way data is read from or written to the file. For example, \u0026ldquo;rb\u0026rdquo; opens the file in binary read mode, and \u0026ldquo;wb\u0026rdquo; opens the file in binary write mode. \u0026ldquo;t\u0026rdquo; (Text mode) Used in combination with other modes to indicate that the file should be opened in text mode (default) \u0026ldquo;+\u0026rdquo; (read and write mode) Open the file for reading and writing. The file\u0026rsquo;s pointer is positioned at the starting of the file. \u0026lsquo;r+\u0026rsquo; (Read and write mode) Opens the file for reading and writing and the pointer is placed at the beginning of the file. If the file does not exist, an error is raised. \u0026lsquo;a+\u0026rsquo; (Read and append mode) Opens the file for reading and writing and the pointer is placed at the end of the file. If the file does not exist in the file path, it is created. Attribute Info fileObj.closed Returns True if the file is closed fileObj.mode Returns access mode with which file has been opened fileObj.name Returns name of the file Strings\r#\rCommand Syntax Comment sep print(objects, sep =\u0026quot;\u0026quot;) sep determines how two objects inside the print statement are separated. end print(objects, end =\u0026quot;\u0026quot;) end determines if the print statement should move on or continue in the same line. id print(id(object)) prints the location id of a variable, list etc. len() print(len('string')) prints the no. of characters in the string \u0026lsquo;string\u0026rsquo;. \\n print(\u0026quot;\\n\u0026quot;) Prints new line. \\t print(\u0026quot;\\t\u0026quot;) Prints tab space \\ print(\u0026quot;\\\u0026quot;\u0026quot;) Prints \u0026quot; inside the string by putting \\ (backslash/escape char) before it. \\f print('Hello\\fWorld') Prints form feed character \\a print('\\a') Rings bell \\o print('\\o56') Prints octal value. \\x print('\\x87') Prints hex value. Raw String print(r\u0026quot;string\u0026quot;) Prints the string raw,i.e., escapes \u0026quot; and other chars and treats them as normal text. f-string print(f\u0026quot;String\u0026quot;) Prints the string with variables inside it. lower() spam.lower() Converts string into lower/upper case. Unicode String u'Sample Unicode String' Specifies that the text is in Unicode format i.e., written in language other than English. Both /u and /U can be used. String Functions\r#\rCommand Syntax Comment islower() spam.islower() Is True if String is lower case. isupper() spam.isupper() String is upper case. isinteger() spam[index No.].isinteger() String has integers only. isspace() spam[index No.].isspace() String or string index pos has space. endswith() string.endswith() String or string index ends with char or integer (within the parentheses) istitle() string.istitle() Checks whether string is title (starts with Capital Letter and every word starts with a Capital Letter) startswith() string.startswith(pattern) Checks if a string starts with a pattern. ().join() (x).join(string items) Joins a bunch of strings into one using a joining character. split() \u0026lsquo;I am a man\u0026rsquo;.split( ) Splits a string along the defined character. rjust() \u0026lsquo;hello\u0026rsquo;.rjust(10,\u0026rsquo;*\u0026rsquo;) Right-justifies by 10 characters. rstrip() spam.rstrip() Removes white spaces from right of the string. Strip() just removes whitespace. replace() spam.replace(replaced, replacer) Replaces a char or a group of chars with other char/group of chars. Symbol Purpose %c Character %d or %i Signed Decimal Integer %s String %u Unsigned Decimal Integer %o Octal Integer %x or %X Hexadecimal Integer (x for lowercase a-f, X for uppercase characters A-F) %E or %e Exponential Notation %f Floating Point Number %g or %G Short Numbers in floating point or exponential notation String Notes\r#\rPython strings are immutable. Once created, they cannot be changed. Can be concatenated using the + operator. A substring of slice is called a slice. Slice operation is used to refer to sub-parts of sequences and strings. Use the dir() with the module name as an argument to see the contents of the string module. Use help() to print details of a particular item in the string module. type() shows the type of an object. Passing ‚Äò\\n‚Äô in split() allows us to split the multiline string stored in the string variable. To find the details of a particular function, you can print its documentation using the docstring through __doc__ attribute. A string can be printed muliple times using print(\u0026lsquo;str\u0026rsquo; * n) where n is the no. of times to be printed. Stride Example\nStride refers to the number of characters the string has to move forward after retrieving the first character. Specifying stride while slicing strings.\nstr = \u0026#34;Welcome to the world of Python.\u0026#34; print(str[2:10]) # Here default stride is 1. print(str[2:10:1]) # Same as above. print(str[2:10:2]) # Stride by 2 i.e., skips every alternate character. print(str[2:13:4]) # Stride by 4 i.e., skips every 4 character. :arrow_forward:\nOutput :\rlcome to\rlcome to\rloet\rle Slice operation with just last positive argument.\nstr = \u0026#39;Welcome to the world of Python.\u0026#39; print(str[::3]) :arrow_forward:\nWceohwloPh. Dictionaries\r#\ractors = {\u0026#39;Michael\u0026#39; : \u0026#39;Nacho\u0026#39;, \u0026#39;Bob\u0026#39; : \u0026#39;Saul\u0026#39;,\u0026#39;Giancarlo\u0026#39;:\u0026#39;Fring\u0026#39;,\u0026#39;Rhea\u0026#39;:\u0026#39;Kim\u0026#39;} for actor in actors: print(actor, actors[actor], sep=\u0026#39; : \u0026#39;) The key is accessed using actor variable from for loop, while the values/definitions are accessed using dict_name[for_var]. Both are separated using the separator \u0026quot; : \u0026ldquo;.\n:arrow_forward:\nMichael : Nacho\rBob : Saul\rGiancarlo : Fring\rRhea : Kim Note : When more key value pairs exist, a list of dictionaries can be defined and accessed.\nactors = [ {\u0026#39;name\u0026#39;:\u0026#39;mando\u0026#39;,\u0026#39;character\u0026#39;:\u0026#39;Nacho\u0026#39;,\u0026#39;profession\u0026#39;:\u0026#39;enforcer\u0026#39;}, {\u0026#39;name\u0026#39;:\u0026#39;rhea\u0026#39;,\u0026#39;character\u0026#39;:\u0026#39;kim\u0026#39;,\u0026#39;profession\u0026#39;:\u0026#39;lawyer\u0026#39;}, {\u0026#39;name\u0026#39;:\u0026#39;bob\u0026#39;,\u0026#39;character\u0026#39;:\u0026#39;jimmy\u0026#39;,\u0026#39;profession\u0026#39;:\u0026#39;lawyer\u0026#39;}, {\u0026#39;name\u0026#39;:\u0026#39;esposito\u0026#39;,\u0026#39;character\u0026#39;:\u0026#39;gustavo\u0026#39;,\u0026#39;profession\u0026#39;:\u0026#39;businessman\u0026#39;} ] print(actors[1][\u0026#39;name\u0026#39;]) # Accessing individual character within the dict_list. for i in actors: print(i[\u0026#39;name\u0026#39;]) :arrow_forward:\nrhea\rmando\rrhea\rbob\resposito Another way of accessing dictionary definitions is by using keys.\nSyntax : print(dict_name(key))\nactors = {\u0026#39;Michael\u0026#39; : \u0026#39;Nacho\u0026#39;, \u0026#39;Bob\u0026#39; : \u0026#39;Saul\u0026#39;,\u0026#39;Giancarlo\u0026#39;:\u0026#39;Fring\u0026#39;,\u0026#39;Rhea\u0026#39;:\u0026#39;Kim\u0026#39;} print(actors.get(\u0026#39;Michael\u0026#39;)) :arrow_forward:\nNacho When populating a dictionary, make sure that there are no keys or values that are duplicate and that every key is unique. If not, then Python keeps only the first key and removes the duplicates.\ndict_1 = {1:\u0026#39;one\u0026#39;, True:\u0026#39;Boolean\u0026#39;} dict_2 = {False:\u0026#39;Bool\u0026#39;, 0:\u0026#39;Zero\u0026#39;} dict_3 = {0:\u0026#39;Zero\u0026#39;, 1:\u0026#39;one\u0026#39;,2:\u0026#39;two\u0026#39;,True:\u0026#39;true\u0026#39;} print(dict_1) print(dict_2) print(dict_3) :arrow_forward:\n{1: \u0026#39;Boolean\u0026#39;}\r{False: \u0026#39;Zero\u0026#39;}\r{0: \u0026#39;Zero\u0026#39;, 1: \u0026#39;true\u0026#39;, 2: \u0026#39;two\u0026#39;} Running Python Files\r#\rShebang Line The first line of all your Python programs should be a shebang line, which tells your computer that you want Python to execute this program. The shebang line begins with #!, but the rest depends on your operating system.\nOn Windows, the shebang line is #! python3 On OS X, the shebang line is #! /usr/bin/env python3 On Linux, the shebang line is #! /usr/bin/python3\nBatch File Code Format\nPlace the following in a .bat file :\n@py.exe E:\\Pending Projects\\hsquery.py %*\r@pause Functions\r#\rDefining a Function\ndef display(name, course = \u0026#39;Gender Studies\u0026#39;): print(\u0026#34;Name :\u0026#39; + name) print(\u0026#34;Course :\u0026#39; + course) display(course=\u0026#39;Engineering\u0026#39;, name = \u0026#39;Blaskowicz\u0026#39;) display(name = \u0026#39;Geralt\u0026#39;) :arrow_forward:\nName : Blaskowicz\rCourse : Engineering\rName : Geralt\rCourse : Gender Studies When default argument comes before non-default argument(s), it gives SyntaxError\ndef func(m = 500, v): return \u0026#34;Force of the body is :\u0026#34; + str(m * v) func(m = 500, 5) :arrow_forward:\nFile \u0026#34;Path\\program.py\u0026#34;, line 2 def func(m = 500, v): ^ SyntaxError : Non-default argument follows default argument Lambda Function\r#\rLambda functions are created using the Lambda keyword. They are a one-line version of functions added to Python due to demand from LISP programmers. Lambda Functions have no name. Can take any number of arguments. Can return just one value in the form of expression. Lambda function definition does not have an explicit return statement but contains an expression which is returned. Since they are one-line version of functions, they cannot contain/return multiple expressions. They cannot access variables other than those in their parameter list. They also cannot access global variables. Lambda functions can be passed as variables in other functions. Example\nProgram written using regular function\ndef small(a, b): if a \u0026gt; b: return a else: return b small(4,5) :arrow_forward:\nOutput :\r5 Program written using Lambda Function\nsumm = lambda x, y: x + y # Smaller number using lambda function. diff = lambda x, y: x - y print(\u0026#34;Smaller of the numbers is : \u0026#34;, small(summ(-3, 2), diff(-1, 5))) :arrow_forward:\nSmaller of the numbers is : -1 More Examples\nUsing a Lambda FUnction with an ordinary function\ndef increment(y): return (lambda x: x+1)(y) a = int(input(\u0026#34;Enter the value of a :\u0026#34;)) print(\u0026#34;a = \u0026#34;, a) print(\u0026#34;a after incrementing = \u0026#34;,end =\u0026#34;\u0026#34;) b = increment(a) print(a) :arrow_forward:\na = -5\ra after incrementing = -5 Program where Lambda Function is used without assigning it to a variable\n# Lambda function assigned to a variable. twice = lambda x: x**2 print(twice(9)) # Lambda function not assigned to any variable twice. print((lambda x: x**2)(9)) :arrow_forward:\n81\r81 A Lambda function that receives no arguments but returns an expression\nSum of first 10 natural numbers\nx = lambda : sum(range(1,11)) print(x()) # Invokes the lambda expression that accepts no arrguments but returns a value in y :arrow_forward:\n55 Recursive Function\r#\rA ==recursive function== is a function that calls itself to solve a smaller version of its task until a final call is made which does not require a call to itself. Every recursive function has two major cases, which are as follows.\nBase Case, in which the problem is simple enough to be solved directly without making any further calls to the same function. Recursive Case, in which first the problem at hand is divided into simpler sub-parts. Second, the function calls itself but with sub-parts of the problem obtained in the first step. Third, the result is obtained by combining the solutions of simpler sub-parts. Thus, we see that recursion utilized the divide and conquer technique of problem solving. Recursion can also be indirect. That is, one function may call the second function which may call the first function, which again calls the first and so on. This can occur on any number of functions.\nPython does not allow more than 1000 recursive calls thereby setting a limit in case of infinite recursion and reports a runtime error message.\nPros and Cons of using recursion :\nPros\nRecursive Solutions often tends to be shorter (and simpler) than conventional ones. Code is clearer and easier to use. Recursion uses the original formula to solve a problem. It follows a Divide and Conquer technique to solve problems. In some instances, recursion may be more efficient. Cons\nAborting a recursive function is sometimes slow and nasty. Takes more memory and time to complete as compared to the conventionasl, non-recursional code. Difficult to find bugs, especially when using global variables. Factorial of a Number def fact(n): if (n == 1 or n == 0): return 1 else: return n * fact(n-1) n = int(input(\u0026#34;Enter the value of n :\u0026#34;)) print(\u0026#34;The factorial of\u0026#34;,n,\u0026#34;is\u0026#34;,fact(n)) Program to calculate GCD using Recursive Function\ndef gcd(a, b): rem = a \u0026amp; b if rem == 0: return b else: return gcd(b, rem) a = int(input(\u0026#34;Enter the greatest number :\u0026#34;)) b = int(input(\u0026#34;Enter the other number : \u0026#34;)) print(\u0026#34;GCD of\u0026#34;,a,\u0026#34; and \u0026#34;,b,\u0026#34; is \u0026#34;,gcd(a, b)) Fibonacci Series using recursion\ndef fibo(n): if (n \u0026lt; 2): return 1 return (fibo(n-1) + fibo(n-2)) n = int(input(\u0026#34;Enter the number of terms you want :\u0026#34;)) for i in range(n): print(\u0026#34;Fibonacci(\u0026#34;, i, \u0026#34;) =\u0026#34;, fibo(i)) :arrow_forward:\nEnter the number of terms you want : 5\rFibonacci( 0 ) = 1\rFibonacci( 1 ) = 1\rFibonacci( 2 ) = 2\rFibonacci( 3 ) = 3\rFibonacci( 4 ) = 5 Program to calculate the exponent of a given number\ndef exporec(x, y): if y == 0: return 1 else: return (x * exporec(x, y-1)) x = int(input(\u0026#34;Enter the index :\u0026#34;)) y = int(input(\u0026#34;Enter the exponent :\u0026#34;)) print(\u0026#34;Result :\u0026#34;, exporec(x, y)) :arrow_forward:\nResult : 25 Program to concatenate two strings using recursion\ndef orderedConcat(string1, string2): if len(string1 + string2) == 0: return \u0026#39;\u0026#39; elif (len(string1) \u0026gt; 0 and len(string2) == 0) or (len(string1) == 0 and len(string2) \u0026gt; 0): return string1 + string2 else: if string1[0] \u0026lt; string2[0]: return string1[0] + orderedConcat(string1[1:], string2) elif string2[0] \u0026lt; string1[0]: return string2[0] + orderedConcat(string1, string2[1:]) else: # if they\u0026#39;re equal return string1[0] + string2[0] + \\ orderedConcat(string1[1:], string2[1:]) def main(): string1 = \u0026#34;acdrt\u0026#34; string2 = \u0026#34;bdet\u0026#34; print(\u0026#34;First string:\u0026#34;, string1) print(\u0026#34;Second string:\u0026#34;, string2) print(\u0026#34;Result :\u0026#34;, end=\u0026#39; \u0026#39;) print(orderedConcat(\u0026#34;acdrt\u0026#34;, \u0026#34;bdet\u0026#34;)) main() :arrow_forward:\nFirst string: acdrt\rSecond string: bdet\rResult : abcddertt Fibonacci Series using Recursive Function\ndef fibonacci(n): if n \u0026lt; 2: return 1 return (fibonacci(n-1) + fibonacci(n-2)) n = int(input(\u0026#34;Enter the no. of items :\u0026#34;)) for i in range(n): print(\u0026#34;Fibonacci (\u0026#34;,i,\u0026#34;) = \u0026#34;, fibonacci(i)) :arrow_forward:\nFibonacci ( 0 ) = 1\rFibonacci ( 1 ) = 1\rFibonacci ( 2 ) = 2\rFibonacci ( 3 ) = 3\rFibonacci ( 4 ) = 5 Program to calculate exp(x, y) using Recursive Function\ndef exp_rec(x, y): if y == 0: return 1 else: return (x * exp_rec(x, y-1)) n = int(input(\u0026#34;Enter the base number :\u0026#34;)) print(\u0026#34;BASE :\u0026#34;,n) m = int(input(\u0026#34;Enter the power number :\u0026#34;)) print(\u0026#34;POWER :\u0026#34;,m) print(\u0026#34;Result is \u0026#34;,exp_rec(n, m)) :arrow_forward:\nBASE : 5\rPOWER : 3\rResult is 125 Documentation Strings\r#\rdef func(): \u0026#39;\u0026#39;\u0026#39; The program just prints the message. It will display Hello World!\u0026#39;\u0026#39;\u0026#39; print(\u0026#34;Hello World!\u0026#34;) print(func.__doc__) # func.__doc__prints the docstring :arrow_forward:\nThe program just prints the message. It will display Hello World! Notes Documentation Strings are the same as that of comments, they explain the code. However, they are more specific and have proper syntax. They are created by putting a multiline string to explain the function.\nAs the first line, it should always be short and concise highlighting the summary of the object‚Äôs purpose. Begin with capital and end with a period. Triple quotes to be used to extend the docstrings into multiple lines. Should not specify info like object name or type. In case of multiple lines in the doc string, the second line should be blank, to separate the summary from the rest of the description. The other lines should be one or more paragraphs describing the object‚Äôs calling conventions, side effects etc. The first non-blank line after the first line of the documentation string determines the indentation for the entire doc string. Unlike comments, docstrings are retained throughout the runtime of the program. So, users can inspect them during program execution. Modules\r#\rWhen a python file is executed directly, it is considered the main module of that program. Main modules are given the special name main and provide the basis for a complete Python program. The main module may import any number of other modules which in turn may import other modules.But the main module of a Python program cannot be imported into other modules. Program to print the sys.path variable\nimport sys print(\u0026#34;\\n Python Path = \\n\u0026#34;, sys.path) Notes\nA module must be first be located and loaded into memory before it can be imported and used in the program. Python searches for modules at different locations in the following order: \u0026lsquo;CWD\\Python310\\Lib\u0026rsquo; If the module is still not found, an error ImportError exception is generated. Module Loading \u0026amp; Execution\r#\rOnce the module is located, it is loaded in memory. A compiled version of the module with file extension ==pyc== is generated. Next time, when the module is imprted, this pyc module is loaded to save recompile time. A new recompiled version of the module is again produced whenever the compiled version is out of date(based on the dates when the pyc file was created.) The programmer can force the Python shell to reload and recompile the .py file to generate a new .pyc file by using the reload() function. To import all the identifiers in a module (in this case sys), type from sys import . However, you should avoid using the import statement as it confuses the variables in the code with the variables in the modules.\nProgram that shows the use of from import statement\nfrom math import pi print(\u0026#34;Pi =\u0026#34;,pi) Program that shows importing a function within a mosule as another variable\nfrom math import sqrt as sq print(\u0026#34;Square root of 25 is \u0026#34;,sq(25)) :arrow_forward:\nPi = 3.141592653589793\rSquare root of 25 is 5.0 Name of the Module\r#\rYou can find the name of the module by using the name attribute of the module.\nPrinting the name of the module\nprint(\u0026#34;Hello) print(\u0026#34;Name of the module is \u0026#34;, __name__) :arrow_forward:\nHello\rName of the module is __main__ Notes\nModules provide all the benefits of modular software design. They provide service and functionality that can be reused in other programs. Even the standard library of Python contains a set of modules. It allows you to logically organize the code so that it becomes easy to understand and use. Modules can only be loaded once, regardless of how many times it is imported. It is customary, but not mandatory, to place the import module code at the beginning of a module. Making Your Own Module\r#\rEvery Python file is a module, that is, every file saved as a ==.py== file is a module.\nThe MyModule.py program file is created, which will be imported into the main.py file.\n# Develping the MyModule.py def display(): print(\u0026#34;Hello) print(\u0026#34;Name of the called module is :\u0026#34;, __name__) str = \u0026#34;Welcome to the world of Python !!!!\u0026#34; # Variable definition. The ==main.py== is now created below\nimport MyModule print(\u0026#34;MyModule str = \u0026#34;, MyModule.str) MyModule.display() print(\u0026#34;Name of the calling module is :\u0026#34;, __name__) :arrow_forward:\nMyModule str = Welcome to the world of Python !!!\rHello\rName of the module is :\rMyModule\rName of the calling module is :\r__main__ We have used str and display attributes from MyModule module. Both these can also be imported as from MyModule import str, display. By convention, modules are named using lowercase letters \u0026amp; optional underscore characters.\nModules \u0026amp; Namespaces\r#\rCreated in Module 1 (==module1.py==)\ndef repeat_x(x): return x*2 Created in Module 2 (==module2.py==)\ndef repeat_x(x): return x**2 On ==main.py==\nimport module1 import module2 result = repeat_x(10) # Ambiguous reference for identifier repeat_x. A namespace is a container that provides a named context for identifiers. Two identifiers with the same name in the same scope will lead to a a nameclash. Hence, Python does not allow programmers to have two different identifiers with the same name. However, in some situations, we need to have same name identifiers. Namespaces caters to such situations. Namespaces allows programs to avoid potential name clashes by associating each identifier with the namespace from which it originates. Module1 \u0026amp; Module2 are imported into the same program. Each module has a function repeat_x(), which return very different result. There will be a name clash as it will be difficult to determine which of these two functions should be called. Namespaces provide a means for resolving such problems. Local, Global \u0026amp; Built-in Namespaces\r#\rDuring a program‚Äôs main execution, there are three main namespaces that are referenced built-in namespace global namespace local namespace The built-in namespace contains all the built-in functions, constants, etc. The global namespace contains identifiers of the currently executing module. The local namespace contains identifiers defined in the currently executing function. In this program, we have used function max() which is defined in the global namespace of the program. Local identifier, large is defined in a function. So it is accessible.\nProgram to demonstrate nameclashes in different namespaces.\ndef max(number): print(\u0026#34;User defined function max...\u0026#34;) large = -1 for i in number: if i \u0026gt; large: large = i return large number = [9, -1, 4, 2, 7] print(max(number)) print(\u0026#34;Sum of these numbers = \u0026#34;, sum(number)) # Built-in namespace :arrow_forward:\nUser defined function max...\r9\rSum of these numbers = 21 Module Private Variables\r#\rIf you want some variables or functions in a module to be accessed privately within the module, but not to be accessed from outside it, then you need to declare those identifiers as private. In Python, identifiers whose name starts with two underscores (__) are private identifiers. These identifiers can be use d only within the module, but not to be accessed from outside it, then you need to declare those identifiers as private. When the module is imported using the import * from modulename, all the identifiers of a module‚Äôs namespace is imported except the private ones. Thus, private modules become inaccessible from within the importing module. Packages\r#\rA package is a hierarchical file directory structure that has modules and other packages within it. Like modules, one can easily create a package. Every package is a directory which must have a special file called __init__.py . This file need not contain a single line of code. It is added to indicate that the directory is not a normal one, but a Python Package. 3. You can import the package the same way that you import a module.\nCreating Packages in Python\r#\rTo create a package called MyPackage, create a directory called ==MyPackage== having the module MyModule and the ==__init__.py== file. Now, to use the MyModule program, you must import it. This is done in two ways. import MyPackage.Mymodule\nor\nfrom MyPackage import MyModule\nThe ==__init**.py== is a very important file that also determines which modules the package exports as the API, while keeping other modules internal, by overriding the **all\\_\\_ variable as shown below. __init__.py: __all__ = [‚ÄúMyModule‚Äù] Notes\nPackages are searched for in the path specified by sys.path. ==__init**.py== file can be an empty file and may also be used to execute initialization code for the package or set the __all** variable. The import statement first checks if the item is defined in the package. If it is unable to find it, an ImportError exception is raised. When importing an item using syntax like Python import item.subitem.subitem, each item except the last must be a package. In no case, it can be a class or function or variable defined in the previous item. Packages have an attribute path which is initialized with a list having the name of the dirtectory holding the ==__init**.py== file. The **path__attribute can be modified to change the future searches for modules and sub-packages contained in the package. Program that prints absolute value, square root and cube of a number\nimport math def cube(x): return x ** 3 a = -100 print(\u0026#34;a =\u0026#34;, a) a = abs(a) print(\u0026#34;Square root of \u0026#34;, a, \u0026#34;is\u0026#34;, math.sqrt(a)) print(\u0026#34;Cube of\u0026#34;,a, \u0026#34; is \u0026#34;, cube(a)) :arrow_forward:\na = -100\rSquare root of 100 is 10.0\rCube of 100 is 1000000 "},{"id":13,"href":"/notes/docs/general/virtualenv/","title":"PythonEnv","section":"Docs","content":"\rVirtualEnv and PIP\r#\rVirtualenv\r#\rDocumentation Command Description python -m pip install --user virtualenv Install virtualenv via pip python -m virtualenv venv Create a new env called venv in the current direectory .\\venv\\Scripts\\activate Activate the virtual environment (*venv here) Pip Commands\r#\rCommand Description pip freeze Outputs all the packages used in requirements.txt pip freeze \u0026gt; requirements.txt Generates a requirements file containing all the package info pip install -r requirements.txt Installs all the packages in requirements.txt file pip list --outdated Lists all the outdated packages in the environment pip freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_} Updates ALL the outdated packages in the system to the latest version in PyPI "},{"id":14,"href":"/notes/docs/web-dev/react/","title":"React","section":"Docs","content":"\rReact Notes\r#\rOfficial Docs\nIntro\r#\rReact is a JavaScript Library used to create interactive websites. It is used to easily create Single Page Applications. "},{"id":15,"href":"/notes/docs/sql-python/","title":"SQL Python","section":"Docs","content":"\rSQL in Python\r#\rOfficial Guide Use the command pip install mysql-connector-python to install MySQL Python. Import the module as import mysql.connector Creating a Database\r#\rimport mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, passwd=\u0026#34;0334\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#39;CREATE DATABASE sampleDB\u0026#39;) db.close() A database called sampleDB is created. Checking if a Database Exists\r#\rimport mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, passwd=\u0026#34;0334\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#39;SHOW DATABASES\u0026#39;) for x in mycursor: print(x) db.close() Prints all the databases in the server. Or you can try to access the databases while creating the connection. import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;user\u0026#34;, passwd=\u0026#34;xyzw\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) db.close() Creating a Table\r#\rimport mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;CREATE TABLE customers ( name VARCHAR(255), address VARCHAR(255) )\u0026#34;) db.close() Checking if a Table Exists\r#\rimport mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;SHOW TABLES\u0026#34;) for x in mycursor: print(x) db.close() Updating a Table Using ALTER Command\r#\rAnd using PRIMARY KEY on an existing table import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\u0026#34;) db.close() INSERT INTO TABLE\r#\rSingle Row Insertion\r#\rimport mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = db.cursor() sql = \u0026#34;INSERT INTO customers (name, address) VALUES (%s, %s)\u0026#34; val = (\u0026#34;John\u0026#34;, \u0026#34;Highway 21\u0026#34;) mycursor.execute(sql, val) db.commit() # Required to make changes in the table print(mycursor.rowcount, \u0026#34;Record Inserted.\u0026#34;) Multiple Row Insertion\r#\rExecute the executemany() method # Fill the customers table with multiple records of data import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() sql = \u0026#34;INSERT INTO customers (name, address) VALUES (%s, %s)\u0026#34; val = [ (\u0026#39;Peter\u0026#39;, \u0026#39;Lowstreet 4\u0026#39;), (\u0026#39;Amy\u0026#39;, \u0026#39;Apple st 652\u0026#39;), (\u0026#39;Hannah\u0026#39;, \u0026#39;Mountain 21\u0026#39;), (\u0026#39;Michael\u0026#39;, \u0026#39;Valley 345\u0026#39;), (\u0026#39;Sandy\u0026#39;, \u0026#39;Ocean blvd 2\u0026#39;), (\u0026#39;Betty\u0026#39;, \u0026#39;Green Grass 1\u0026#39;), (\u0026#39;Richard\u0026#39;, \u0026#39;Sky st 331\u0026#39;), (\u0026#39;Susan\u0026#39;, \u0026#39;One way 98\u0026#39;), (\u0026#39;Vicky\u0026#39;, \u0026#39;Yellow Garden 2\u0026#39;), (\u0026#39;Ben\u0026#39;, \u0026#39;Park Lane 38\u0026#39;), (\u0026#39;William\u0026#39;, \u0026#39;Central st 954\u0026#39;), (\u0026#39;Chuck\u0026#39;, \u0026#39;Main Road 989\u0026#39;), (\u0026#39;Viola\u0026#39;, \u0026#39;Sideway 1633\u0026#39;) ] mycursor.executemany(sql, val) db.commit() print(mycursor.rowcount, \u0026#34;was inserted.\u0026#34;) db.close() GET INSERTED ID\r#\rGet the ID of the last entered row by asking the cursor object. import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;username\u0026#34;, password=\u0026#34;123456\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() sql = \u0026#34;INSERT INTO customers (name, address) VALUES (%s, %s) val = (\u0026#34;Michelle\u0026#34;, \u0026#34;Blue Village\u0026#34;) mycursor.execute(sql, val) db.commit() print(\u0026#34;1 Record inserted, ID:\u0026#34;, mycursor.lastrowid) db.close() SELECT QUERY\r#\r# Select all records from the customers table and display the result import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;SELECT * FROM customers\u0026#34;) result = mycursor.fetchall() for i in result: print(i) db.close() USING THE FETCHONE() METHOD\r#\rTo fetch only one record from the selected query import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;SELECT * FROM customers\u0026#34;) myresult = mycursor.fetchone() print(myresult) db.close() WHERE FILTER\r#\rimport mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;SELECT * FROM customers WHERE address =\u0026#39;Park Lane 38\u0026#39;\u0026#34; mycursor.execute(sql) myresult = mycursor.fetchall() for x in myresult: print(x) mydb.close() PREVENT SQL INJECTION\r#\rSQL Injection is a common web hacking technique to destroy or misuse the database. To prevent this attack, you should escape the values provided in the query by using placeholder %s method import mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;SELECT * FROM customers WHERE address = %s\u0026#34; adr = (\u0026#34;Yellow Garden 2\u0026#34;, ) mycursor.execute(sql, adr) myresult = mycursor.fetchall() for x in myresult: print(x) mydb.close() ORDER BY STATEMENT\r#\rimport mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;SELECT * FROM customers ORDER BY name\u0026#34; mycursor.execute(sql) myresult = mycursor.fetchall() for x in myresult: print(x) mydb.close() DELETE FROM STATEMENT\r#\rimport mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;DELETE FROM customers WHERE address = \u0026#39;Mountain 21\u0026#39;\u0026#34; mycursor.execute(sql) mydb.commit() # Required when making changes to the Database print(mycursor.rowcount, \u0026#34;record(s) deleted\u0026#34;) mydb.close() In the above example, the query variable Mountain 21 is directly entered into the statement which may cause SQL Injection. Therefore, placeholder is used. The above code can be written as : import mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;DELETE FROM customers WHERE address = %s\u0026#34; # Statement does not have query value adr = (\u0026#34;Yellow Garden 2\u0026#34;, ) # Query is done usiong a variable to which the value is assigned mycursor.execute(sql, adr) mydb.commit() print(mycursor.rowcount, \u0026#34;record(s) deleted\u0026#34;) mydb.close() DROP (Delete) TABLE\r#\r# Delete the table customers import mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;DROP TABLE customers\u0026#34; mycursor.execute(sql) mydb.close() Use the IF EXISTS keyword if you want to delete something that may or may not already be deleted. import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = db.cursor() sql = \u0026#34;DROP TABLE IF EXISTS customers\u0026#34; mycursor.execute(sql) db.close() UPDATE THE TABLE\r#\rUpdate existing records byusing the UPDATE statement # Change the address in the column from \u0026#34;Valley 345\u0026#34; to \u0026#34;Canyon 123\u0026#34; import mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;UPDATE customers SET address = \u0026#39;%s\u0026#39; WHERE address = \u0026#39;%s\u0026#39;\u0026#34; val = (\u0026#34;Canyon 123\u0026#34;, \u0026#34;Valley 345\u0026#34;) mycursor.execute(sql, val) # Injection-proof statement mydb.commit() # Required to make changes to the database print(mycursor.rowcount, \u0026#34;record(s) affected\u0026#34;) mydb.close() LIMIT THE FILTER\r#\rLimit the No. of records returned from the query, by using the LIMIT filter import mysql.connector db = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;password123\u0026#34;, datanase=\u0026#34;sampleDB\u0026#34; ) mycursor = db.cursor() mycursor.execute(\u0026#34;SELECT * FROM customers LIMIT 5\u0026#34;) result = mycursor.fetchball() for x in result: print(x) db.close() START FROM ANOTHER POSITION\r#\r-If you want to return five records, starting from the third record, you can use the OFFSET keyword\nimport mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() mycursor.execute(\u0026#34;SELECT * FROM customers LIMIT 5 OFFSET 2\u0026#34;) myresult = mycursor.fetchall() for x in myresult: print(x) mydb.close() JOIN STATEMENT\r#\rimport mysql.connector mydb = mysql.connector.connect( host=\u0026#34;localhost\u0026#34;, user=\u0026#34;yourusername\u0026#34;, password=\u0026#34;yourpassword\u0026#34;, database=\u0026#34;mydatabase\u0026#34; ) mycursor = mydb.cursor() sql = \u0026#34;SELECT \\ users.name AS user, \\ products.name AS favorite \\ FROM users \\ INNER JOIN products ON users.fav = products.id\u0026#34; mycursor.execute(sql) myresult = mycursor.fetchall() for x in myresult: print(x) mydb.close() "}]